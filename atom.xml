<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>简单即是美</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://simuty.com/"/>
  <updated>2020-05-17T05:49:45.110Z</updated>
  <id>https://simuty.com/</id>
  
  <author>
    <name>Howard</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>判断推理--类比</title>
    <link href="https://simuty.com/2020/05/16%E6%8E%A8%E7%90%86%E5%88%A4%E6%96%AD-%E7%B1%BB%E6%AF%94/"/>
    <id>https://simuty.com/2020/05/16推理判断-类比/</id>
    <published>2020-05-16T07:37:30.000Z</published>
    <updated>2020-05-17T05:49:45.110Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/05/16推理判断-类比/../../../images/photos/2020/018.jpg" width="70%"></p><p><span class="geyan"> 凡斗者，必自以为是，而以人为非也。（《荀子·荣辱》） </span> <a id="more"></a></p><p><strong>题目要求：</strong></p><p>题干给出一组相关的词，要求通过观察分析，在备选答案中找出一组与之在<strong>逻辑关系</strong>上最为贴近或<strong>相似的词</strong></p><p><strong>常见题型：</strong></p><ol type="1"><li>两词型——A∶B</li><li>三词型——A∶B∶C</li><li>填空型——A 对于（ ）相当于（ ）对于 B ---&gt; <code>代入判断</code></li></ol><h3 id="语义关系">语义关系</h3><h4 id="近义反义关系">近义、反义关系</h4><ol type="1"><li>一级关系<ol type="1"><li>近义关系<ol type="1"><li>开心-高兴</li><li>言不由衷-口是心非</li></ol></li><li>反义关系<ol type="1"><li>勤奋-懒惰</li><li>一丝不苟-粗枝大叶</li></ol></li></ol></li><li>二级关系 <strong>如果一级无法区分</strong><ol type="1"><li>感情色彩<ol type="1"><li>褒义</li><li>贬义</li><li>中性</li></ol></li></ol></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="number">1</span>（<span class="number">2017</span> 江西）精致∶粗糙</span><br><span class="line">A. 河水∶海水     C. 违背∶遵循</span><br><span class="line">B. 山峰∶深渊     D. 怀疑∶守信 [守信&lt;-&gt;失信]  [怀疑-相信]</span><br></pre></td></tr></table></figure><p><span id="inline-purple"> 解题思路 </span></p><ol type="1"><li>实例为反义词<ol type="1"><li>一般 <strong>形容词、动词</strong> 可以形成近反义词</li></ol></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="number">3</span>（<span class="number">2016</span> 吉林）大义凛然∶卑躬屈膝 D</span><br><span class="line">A. 安分守己∶好高骛远     B. 穷奢极欲∶节衣缩食</span><br><span class="line">C. 得心应手∶百无一能     D. 持之以恒∶虎头蛇尾</span><br></pre></td></tr></table></figure><p><span id="inline-blue"> 解题思路 </span></p><table><thead><tr class="header"><th>成语</th><th>含义</th><th>褒/贬</th><th>近义词</th><th>反义词</th></tr></thead><tbody><tr class="odd"><td>安分守己</td><td>安于本分、规矩老师</td><td>褒</td><td>安分守常、<code>循规蹈矩</code>、奉公守法</td><td>为非作歹、胡作非为</td></tr><tr class="even"><td>好高骛远</td><td>脱离实际追求难以实现的目标</td><td><strong>贬</strong></td><td>不自量力</td><td>脚踏实地 、量力而行</td></tr><tr class="odd"><td>穷奢极欲</td><td>极度奢侈、任意挥霍、纵情享受</td><td><strong>贬</strong></td><td>骄奢淫逸</td><td>节衣缩食 克勤克俭 <code>单食瓢饮</code></td></tr><tr class="even"><td>节衣缩食</td><td>省穿省吃 生活<code>节俭</code></td><td></td><td></td><td></td></tr><tr class="odd"><td>得心应手</td><td>技艺纯熟、应用自如</td><td></td><td>心手相应、挥洒自如</td><td>力不从心</td></tr><tr class="even"><td>百无一能</td><td>什么都不会</td><td>贬</td><td>一无所长</td><td>无所不能</td></tr></tbody></table><ol type="1"><li>持之以恒：用恒心坚持下去 不间断不松懈<ol type="1"><li>褒义词</li><li>近义词： 契而不舍 坚持不懈</li><li>反义词：虎头蛇尾 半途而废 浅尝辄止</li></ol></li><li>虎头蛇尾：有始无终 起初声势很大 后来劲头很小<ol type="1"><li>贬义词：半途而废 浅尝辄止</li><li>近义词：</li></ol></li></ol><p>二级辨析 感情色彩</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例 <span class="number">4</span>（<span class="number">2016</span> 厦门）成败∶呼吸 B</span><br><span class="line">A. 拉扯∶拖拽     B. 好歹∶始终</span><br><span class="line">C. 匆忙∶潇洒     D. 推荐∶录用</span><br></pre></td></tr></table></figure><p><span id="inline-blue"> 汇总 </span></p><ol type="1"><li>同反词</li><li>感情</li><li>拆字对比</li></ol><hr><p><img src="/2020/05/16推理判断-类比/05.png" width="50%"></p><blockquote><p>全是语文基础。</p></blockquote><h4 id="比喻象征义">比喻&amp;象征义</h4><p><span id="inline-blue"> 常识积累： <span></span></span></p><ol type="1"><li>“丝”指<code>弦乐器</code>，“竹”指<code>管乐器</code>，丝竹是中国古代乐器的总称，也借指 <code>音乐</code>。</li><li>“案牍”中“案”指桌子， “牍”指竹简，词语指桌上用来写字的竹简，指代公文，《陋室铭》：无丝竹之乱耳，无案牍之劳形。</li><li>汗青代指史册，古代在竹简上书写，采来青色的竹子，用火烤的冒出水后才易书写；</li><li>干戈：“干”指盾牌，“戈”指古代武器，“干戈”泛指武器</li><li>南冠：囚犯</li><li>桑梓 [zi]：家乡</li><li>青衿：读书人</li><li>浮屠：佛塔</li><li>同窗：同学</li><li>手足：兄弟</li><li>白丁/布衣：百姓</li><li>鸿雁/礼札：书信</li><li>总角/垂髫 [tiáo] : 小孩</li><li>干戈/烽烟：战争</li><li>黄发/伛偻 [yǔ lǚ]： 即腰背弯， 出自《淮南子·精神训》：子求行年五十有四，而病伛偻</li></ol><p><span id="inline-purple"> 与身体相关的 <span></span></span></p><ol type="1"><li>眉目：头绪 ---- 咽喉：要塞</li><li>白发：沧桑 ---- 乳牙：稚嫩</li><li>七寸：要害 ---- 骨肉：亲人</li><li>手足：兄弟 ---- 手腕：手段</li><li>首脑：领袖 ---- 臂膀：得力助手</li><li>肝胆：勇气 ---- 心脏：中心或要害</li></ol><p>真题</p><p>心腹：信任 ❌ 心腹：信任的人 !== 信任 耳目：刺探 ❌ 耳目：刺探消息的人 !== 刺探</p><p><span id="inline-yellow"> 颜色相关的 <span></span></span></p><ol type="1"><li>白色：纯洁 ---- 蓝色：忧郁</li><li>红色：热情 [革命] ---- 绿色：环保 [和平]</li></ol><p><span id="inline-blue"> 动物相关的 <span></span></span></p><ol type="1"><li>麒麟、龙、凤凰、龟、貔貅：祥瑞</li><li>鸳鸯：爱情</li><li>蚍蜉：自不量力； 比喻 <strong>滋补两者的人，不是自不量力</strong></li><li>豺狼：凶残</li><li>蜜蜂：勤劳</li><li>鸽子：和平</li><li>仙鹤：长寿</li></ol><p><span id="inline-blue"> 植物🌳相关的 <span></span></span></p><ol type="1"><li>牡丹：富贵 [华贵] ---- 莲花：纯洁无暇</li><li>松：高洁 [长寿] ---- 翠竹：高洁 [刚直]</li><li>桃李：学生 ---- 折柳：惜别</li><li>红豆：相思 ---- 玫瑰：爱情</li><li>四君子：梅兰菊竹 高洁</li></ol><p><span id="inline-blue"> 其他比喻 <span></span></span></p><ol type="1"><li>明镜：公正 ---- 天平：公正</li><li>烛光：母爱 ---- 火🔥：热情</li><li>蜡烛：老师 ---- 月圆：团聚</li><li>桎梏 [zhìgù]: 舒服 ---- 汗青：史册</li><li>狼烟：入侵</li></ol><p><img src="/2020/05/16推理判断-类比/06.png" width="80%"></p><h3 id="矛盾关系">矛盾关系</h3><h4 id="并列关系">并列关系 🚩</h4><p><img src="/2020/05/16推理判断-类比/07.png" width="80%"> <img src="/2020/05/16推理判断-类比/08.png" width="80%"> <img src="/2020/05/16推理判断-类比/09.png" width="80%"></p><p>【注意】<strong>并列关系</strong>：两个词语完全不同，但属于同一级别。如“手”和“脚” 是人体的器官，二者层级一样，是并列关系；而 <strong>“手”和“手指”不是并列关系</strong>。</p><h4 id="包容关系">包容关系 🚩</h4><p><img src="/2020/05/16推理判断-类比/10.png" width="80%"> <img src="/2020/05/16推理判断-类比/11.png" width="80%"> <img src="/2020/05/16推理判断-类比/12.png" width="80%"></p><h4 id="交叉关系">交叉关系</h4><p><img src="/2020/05/16推理判断-类比/13.png" width="80%"> <img src="/2020/05/16推理判断-类比/14.png" width="80%"></p><p><span id="inline-blue"> 常考交叉关系 </span></p><ol type="1"><li>葡萄酒∶名酒 ---- 影印本∶线装本</li><li>哺乳动物∶陆生动物 ---- 编剧∶诗人</li><li><strong>处长∶教授∶博士</strong> ---- 瓷器∶茶杯（花瓶）</li><li><strong>中药∶植物</strong> ---- 电视剧∶喜剧</li><li>壁画∶山水画 ---- 画家∶作家</li><li>学生∶运动员 ---- 党员∶干部∶青年</li><li>酒瓶∶玻璃瓶 ---- 文物∶建筑</li><li>敞篷车∶跑车 ---- <strong>所得税∶地方税</strong></li><li>军人∶诗人 ---- 流行∶高尚</li><li>专家∶学者 ---- <strong>唐诗∶七律</strong></li><li><strong>航天器∶交通工具</strong></li></ol><h3 id="对应关系">对应关系 🚩</h3><p><img src="/2020/05/16推理判断-类比/27.png" width="80%"></p><p><strong>考点比较多</strong></p><ol type="1"><li>材料：二级辨析考虑<code>直接材料/间接材料</code>，如“面粉∶面包”是直接原 材料关系，“小麦∶面包”是间接原材料关系。</li><li>工艺：二级辨析考虑物理变化（如捆扎、打磨、切）/化学变化（如煅 烧、加热、氧化、发酵）。</li><li>功能（作用）：二级辨析考虑主要/次要功能。</li><li>属性：二级辨析考虑必然/或然（可能、一定）属性。</li><li>时间顺序：出现 2-3 个行为（动词），可能考查时间顺序，细化考虑主 体是否一致。</li><li>必要条件：即没它不行，用“必须”和“可能”区分。</li><li>因果：可能考查词语拆分后仍然存在因果关系，如“人去∶楼空”。</li></ol><blockquote><p>做题时，优先考虑一级辨析，如果通过一级辨析选不出唯一答案，才 <strong>考虑二级辨析</strong>。</p></blockquote><p><span id="inline-blue"> 工艺 </span> <img src="/2020/05/16推理判断-类比/15.png" width="80%"> <img src="/2020/05/16推理判断-类比/16.png" width="80%"> <img src="/2020/05/16推理判断-类比/17.png" width="80%"></p><p><span id="inline-blue"> 功能 </span> <img src="/2020/05/16推理判断-类比/18.png" width="80%"></p><p><span id="inline-blue"> 属性 </span></p><p><img src="/2020/05/16推理判断-类比/19.png" width="80%"></p><p><span id="inline-blue"> 时间 </span></p><p><img src="/2020/05/16推理判断-类比/20.png" width="80%"> <img src="/2020/05/16推理判断-类比/19.png" width="80%"></p><p><span id="inline-blue"> 时间 </span></p><p><img src="/2020/05/16推理判断-类比/21.png" width="80%"> <img src="/2020/05/16推理判断-类比/22.png" width="80%"> <img src="/2020/05/16推理判断-类比/23.png" width="80%"></p><p><span id="inline-blue"> 必要 </span> <img src="/2020/05/16推理判断-类比/24.png" width="80%"></p><p><span id="inline-blue"> 因果 </span></p><p><img src="/2020/05/16推理判断-类比/25.png" width="80%"></p><p>题干是“水滴石穿”，选项是“绳锯 木断”“持之以恒”，三者均形容坚持，无法选择唯一答案。 <strong>考虑拆词</strong>，“水滴” 是“石穿”的原因，“绳锯”是“木断”的原因，而“持之以恒”无法拆分，故 “绳锯木断”与题干更为一致。</p><p><img src="/2020/05/16推理判断-类比/26.png" width="80%"></p><ol type="1"><li>兽聚鸟散：像鸟兽一样时聚时散，既指“兽”，又指“鸟”。</li><li>秦时明月汉时关：不是说秦朝的月亮、汉代的关隘，而是指秦朝和汉 代均有明月和关隘。</li><li>开我东阁门，坐我西阁床：不是说打开东边的门、做到西边的床上， 而是指花木兰当兵回来之后看看各个屋子、坐坐各个床，表达回家的欣喜之感。</li><li>东市买骏马，西市买鞍鞯，南市买辔头，北市买长鞭：不是跑来跑去 在各个集市买东西，而是指去集市上买各种各样的东西。</li><li>当窗理云鬓，对镜贴黄花：均指照着东西化妆。</li><li><code>将军百战死，壮士十年归</code>：不是指死亡的只有将军，回来的只有壮士， 而是描写战争的惨烈，将军和壮士均可能死在战场上，也都有可能回来。</li><li>明月别枝惊鹊，清风半夜鸣蝉：不是说月亮往上升吓跑了鸟，清风一 吹把蝉吵醒了，于是蝉开始鸣叫，而是指<strong>月亮和风可能把鹊和蝉惊到</strong>，描写的是 <strong>静谧的场景</strong>。</li></ol><h3 id="语法关系">语法关系</h3><p>造句原则：</p><p>①造简单句：能不加字就不加字，能少加字就少加字</p><p>②加字尽量加一样的</p><p><img src="/2020/05/16推理判断-类比/28.png" width="80%"></p><p><img src="/2020/05/16推理判断-类比/29.png" width="80%"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/05/16推理判断-类比/../../../images/photos/2020/018.jpg&quot; width=&quot;70%&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;geyan&quot;&gt; 凡斗者，必自以为是，而以人为非也。（《荀子·荣辱》） &lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="公考" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/"/>
    
      <category term="判断推理" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/"/>
    
    
      <category term="类比" scheme="https://simuty.com/tags/%E7%B1%BB%E6%AF%94/"/>
    
  </entry>
  
  <entry>
    <title>判断推理--逻辑</title>
    <link href="https://simuty.com/2020/05/15%E6%8E%A8%E7%90%86%E5%88%A4%E6%96%AD-%E9%80%BB%E8%BE%91/"/>
    <id>https://simuty.com/2020/05/15推理判断-逻辑/</id>
    <published>2020-05-15T12:37:30.000Z</published>
    <updated>2020-05-17T05:36:10.967Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/05/15推理判断-逻辑/../../../images/photos/2020/019.jpg" width="80%"></p><p><span class="geyan"> 美好的东西是不会死的。<br> The good things are not dead.<br> --《肖申克的救赎》 </span> <a id="more"></a></p><h2 id="翻译推理">翻译推理</h2><p><span id="inline-purple"> 题型特征 </span></p><ol type="1"><li>题干和选项中出现比较明显的逻辑关联词</li><li>提问方式是“可以推出”“不能推出”等</li></ol><p><span id="inline-bule"> 解题思维 </span></p><ol type="1"><li>先翻译 == （逻辑关系词 翻译为 A =&gt; B )</li><li>再推理 == （根据逻辑公式进行推导）</li></ol><h3 id="前推后">前推后</h3><p>关联词</p><ol type="1"><li>如果。那么/就。</li><li>若。则。</li><li>只要。就。</li><li>所有。都。</li><li>为了。一定/必须。</li><li>。是。的充分条件</li></ol><p><img src="/2020/05/15推理判断-逻辑/04.png" width="80%"></p><p><img src="/2020/05/15推理判断-逻辑/05.png" width="80%"></p><p><img src="/2020/05/15推理判断-逻辑/06.png" titie="串起来" width="80%"></p><h3 id="后推前">后推前</h3><p><img src="/2020/05/15推理判断-逻辑/07.png" width="80%"></p><p><img src="/2020/05/15推理判断-逻辑/08.png" title="答案：B" width="80%"></p><p><img src="/2020/05/15推理判断-逻辑/09.png" width="80%"> <img src="/2020/05/15推理判断-逻辑/10.png" width="80%"> <img src="/2020/05/15推理判断-逻辑/11.png" width="80%"></p><blockquote><p>谁必不可少 就放在箭头后边</p></blockquote><p><img src="/2020/05/15推理判断-逻辑/12.png" width="80%"></p><p><img src="/2020/05/15推理判断-逻辑/13.png" width="80%"></p><h3 id="且-或">且 或</h3><p><img src="/2020/05/15推理判断-逻辑/14.png" width="80%"> <img src="/2020/05/15推理判断-逻辑/15.png" width="80%"> <img src="/2020/05/15推理判断-逻辑/16.png" title="答案：C" width="80%"> <img src="/2020/05/15推理判断-逻辑/17.png" title="答案：C" width="80%"> <img src="/2020/05/15推理判断-逻辑/18.png" width="80%"></p><h3 id="德-摩根定律">德 摩根定律</h3><p><img src="/2020/05/15推理判断-逻辑/19.png" width="80%"> <img src="/2020/05/15推理判断-逻辑/20.png" width="80%"></p><h3 id="推理方式">推理方式</h3><p>提问方式：以下哪项中的推理形式/结构与题干中的推理形式/结构相同？</p><p>照这写就行</p><p><img src="/2020/05/15推理判断-逻辑/22.png" width="80%"></p><hr><p><img src="/2020/05/15推理判断-逻辑/21.png" width="80%"></p><h2 id="组合排列">组合排列</h2><p><span id="inline-purple"> 题型特征 </span></p><ol type="1"><li>题干给出两组以及两组以上对象</li><li>给出几组对象之间的关系</li></ol><h3 id="排除法代入法">排除法、代入法</h3><ol type="1"><li>何时用：题干条件为真，选项信息充分。</li><li>如何用：读一句，排一句</li></ol><p><img src="/2020/05/15推理判断-逻辑/23.png" width="80%"></p><p><img src="/2020/05/15推理判断-逻辑/24.png" width="80%"></p><p><img src="/2020/05/15推理判断-逻辑/25.png" width="80%"></p><h3 id="辅助技巧">辅助技巧</h3><p><img src="/2020/05/15推理判断-逻辑/27.png" width="80%"></p><p><img src="/2020/05/15推理判断-逻辑/26.png" width="80%"></p><p><img src="/2020/05/15推理判断-逻辑/28.png" title="列公式" width="80%"></p><p><img src="/2020/05/15推理判断-逻辑/29.png" titile="好好看" width="80%"></p><p><img src="/2020/05/15推理判断-逻辑/30.png" titile="有点复杂" width="100%"></p><p><img src="/2020/05/15推理判断-逻辑/31.png" titile="还不定项" width="80%"></p><p><img src="/2020/05/15推理判断-逻辑/32.png" titile="还不定项" width="80%"></p><h2 id="日常结论">日常结论</h2><p><span id="inline-purple"> 类似于言语的细节判断 </span></p><p>题干： 言语、无逻辑关联词</p><p>提问：由此可以推出、不能推出</p><p><span id="inline-bule"> 解题思路 </span></p><ol type="1"><li><strong>不选</strong><ol type="1"><li>逻辑错误</li><li>无中生有</li><li>偷换概念</li></ol></li><li><code>慎选</code><ol type="1"><li>比较关系：比。, 越来越。、更</li><li>绝对词：一定、必须、肯定、只要就、只有才</li><li>程度：最、极大、很。</li><li>范围的扩大</li></ol></li><li><span id="inline-purple"> 优选 </span><ol type="1"><li>词汇：可能、有的、有些。</li></ol></li></ol><blockquote><p><strong>警惕</strong>五大坑王：更！最！越！首！极！</p></blockquote><hr><p><img src="/2020/05/15推理判断-逻辑/33.png" titile width="80%"></p><p><img src="/2020/05/15推理判断-逻辑/34.png" titile width="80%"></p><p><img src="/2020/05/15推理判断-逻辑/35.png" titile width="100%"></p><h2 id="逻辑论证">逻辑论证</h2><h3 id="概念">概念</h3><p>消弱题型：反对</p><p>加强题型：赞同</p><p><img src="/2020/05/15推理判断-逻辑/36.png" titile width="80%"> <img src="/2020/05/15推理判断-逻辑/37.png" titile width="80%"> <img src="/2020/05/15推理判断-逻辑/38.png" titile width="80%"> <img src="/2020/05/15推理判断-逻辑/39.png" titile width="80%"> <img src="/2020/05/15推理判断-逻辑/40.png" titile width="80%"> <img src="/2020/05/15推理判断-逻辑/41.png" titile width="80%"> <img src="/2020/05/15推理判断-逻辑/42.png" titile width="80%"> <img src="/2020/05/15推理判断-逻辑/43.png" titile width="80%"></p><p><img src="/2020/05/15推理判断-逻辑/44.png" titile="优选：B" width="80%"></p><h3 id="加强">加强</h3><h4 id="解释原因-举例子">解释原因 &amp; 举例子</h4><p>采用 解释说明 ｜｜ 举例子</p><ol type="1"><li>只有论点</li><li>论点与论据话题不一致</li></ol><p><img src="/2020/05/15推理判断-逻辑/45.png" titile width="80%"></p><p><img src="/2020/05/15推理判断-逻辑/46.png" titile width="80%"></p><h4 id="论点论据搭桥">论点&amp;论据搭桥</h4><ol type="1"><li>论点 论据不一致<ol type="1"><li>去同存异</li></ol></li></ol><p><img src="/2020/05/15推理判断-逻辑/50.png" width="80%"> <img src="/2020/05/15推理判断-逻辑/51.png" width="80%"> <img src="/2020/05/15推理判断-逻辑/52.png" width="80%"> <img src="/2020/05/15推理判断-逻辑/53.png" title="答案：C" width="80%"> <img src="/2020/05/15推理判断-逻辑/54.png" width="80%"></p><h4 id="必要条件">必要条件</h4><p>属于补充论据</p><p><img src="/2020/05/15推理判断-逻辑/55.png" width="80%"></p><p><img src="/2020/05/15推理判断-逻辑/56.png" width="80%"></p><h4 id="总结">总结</h4><p><img src="/2020/05/15推理判断-逻辑/57.png" width="80%"> <img src="/2020/05/15推理判断-逻辑/58.png" width="80%"> <img src="/2020/05/15推理判断-逻辑/59.png" width="80%"></p><ol type="1"><li>示例--解释说明<ol type="1"><li>论点：伐木 &amp; 文明</li><li>解释说明：伐木 与 文明的关系</li></ol></li><li>示例--搭桥<ol type="1"><li>论点：文明。</li><li>论据：伐木。</li><li>搭桥：伐木 与 文明的关系</li></ol></li></ol><h3 id="削弱">削弱</h3><p><img src="/2020/05/15推理判断-逻辑/60.png" width="80%"></p><h4 id="否论点-举反例">否论点 &amp; 举反例</h4><p><img src="/2020/05/15推理判断-逻辑/61.png" width="80%"> <img src="/2020/05/15推理判断-逻辑/62.png" width="80%"> <img src="/2020/05/15推理判断-逻辑/63.png" width="80%"> <img src="/2020/05/15推理判断-逻辑/64.png" width="80%"> <img src="/2020/05/15推理判断-逻辑/65.png" width="80%"> <img src="/2020/05/15推理判断-逻辑/66.png" width="80%"></p><h4 id="拆桥-论点论据">拆桥-论点&amp;论据</h4><p><img src="/2020/05/15推理判断-逻辑/67.png" width="80%"> <img src="/2020/05/15推理判断-逻辑/68.png" width="80%"> <img src="/2020/05/15推理判断-逻辑/69.png" width="80%"></p><p>总结 <img src="/2020/05/15推理判断-逻辑/70.png" width="80%"></p><h4 id="否定论据">否定论据</h4><p><img src="/2020/05/15推理判断-逻辑/71.png" width="80%"> <img src="/2020/05/15推理判断-逻辑/72.png" width="80%"> <img src="/2020/05/15推理判断-逻辑/73.png" width="80%"> <img src="/2020/05/15推理判断-逻辑/74.png" title="B" width="80%"> <img src="/2020/05/15推理判断-逻辑/75.png" title="很好的综合选项" width="80%"></p><p><img src="/2020/05/15推理判断-逻辑/76.png" width="80%"></p><h2 id="易错点">❌易错点❌</h2><p><span id="inline-purple"> 对策 <span></span></span></p><p>选项中出现<strong>对策</strong>类的词汇，并不知道对策是否执行，所以一定要注意，<code>有问题</code>--不选择 如：</p><ol type="1"><li>法律 <strong>应该</strong> 制定 ...</li><li>企业 <strong>应当</strong> 担负 ...</li></ol><p><span id="inline-blue"> 诉诸无知 == 不知道 <span></span></span></p><p>不知道的<strong>论据</strong>，不能当论据了，<code>不选择</code>。如：</p><ol type="1"><li><strong>没有实际数据显示。..</strong></li><li><strong>没有研究表明。...</strong></li><li>我们<code>没注意</code>到。..</li></ol><p><span id="inline-yellow"> 超出范围 <span></span></span></p><p>如果讨论的是 [A, B], 结果来了个论据是 <strong>还有更好的</strong>，超出谈论范围，<strong>不选择</strong></p><p><span id="inline-purple"> 无关选项 <span></span></span></p><p>和<strong>话题、主体</strong>不一致的不选择</p><p><span id="inline-blue"> 类比的选项 <span></span></span></p><p>类比一般比较弱，<strong>慎选</strong> 如：<code>两者类似</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/05/15推理判断-逻辑/../../../images/photos/2020/019.jpg&quot; width=&quot;80%&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;geyan&quot;&gt; 美好的东西是不会死的。&lt;br&gt; The good things are not dead.&lt;br&gt; --《肖申克的救赎》 &lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="判断推理" scheme="https://simuty.com/categories/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/"/>
    
      <category term="公考" scheme="https://simuty.com/categories/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%85%AC%E8%80%83/"/>
    
    
      <category term="推理" scheme="https://simuty.com/tags/%E6%8E%A8%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>爱因斯坦--我的世界观</title>
    <link href="https://simuty.com/2020/05/15%E5%85%B3%E4%BA%8E%E4%BA%BA%E7%94%9F--%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E8%A7%82/"/>
    <id>https://simuty.com/2020/05/15关于人生--我的世界观/</id>
    <published>2020-05-15T07:37:30.000Z</published>
    <updated>2020-05-17T05:37:58.060Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/05/15关于人生--我的世界观/../../../images/photos/2020/016.jpg" width="66%"></p><p><span class="geyan"> 世上只有一种英雄主义——就是在认清生活的真相之后依然热爱生活 ——罗曼.罗兰 （作家 诺贝尔奖得主） </span> <a id="more"></a></p><blockquote><p>（之前说“本文是爱因斯坦在1921年诺贝尔奖颁奖典礼上的演说辞”有误，查了资料订正如下：此文最初发表在1930年出版的《论坛和世纪》（Forum and century）84卷，193-194页。当时用的标题是“我的信仰”（What I believe）。这里译自《思想和见解》8-11页和《我的世界观》英译本237-242页，许良英、赵中立、张宜三编译，选自商务印书馆《爱因斯坦文集第三卷》。）</p></blockquote><p>　　我们这些总有一死的人，命运是多么的奇特！我们每个人在这个世界上都只作一个短暂的逗留；目的何在，却无从知道，尽管有时自以为对此若有所感。但是，不必深思，只要从日常生活中就可以明白：人是为别人而生存的──首先是为那样一些人，我们的幸福全部依赖于他们的喜悦和健康；其次是为许多我们所不认识的人，他们的命运通过同情的纽带同我们密切结合在一起。我每天上百次的提醒自己：我的精神生活和物质生活都是以别人（包括生者和死者）的劳动为基础的，我必须尽力以同样的分量来报偿我所领受了的和至今还在领受着的东西。我强烈地向往着俭朴的生活。并且时常发觉自己占用了同胞的过多劳动而难以忍受。我认为阶级的区分是不合理的，它最后所凭借的是以暴力为根据。我也相信，简单淳朴的生活，无论在身体上还是在精神上，对每个人都是有益的。</p><p>　　我完全不相信人类会有那种在哲学意义上的自由。每个人的行为不仅受着外界的强制，而且要适应内在的必然。叔本华说：“人虽然能够做他所想做的，但不能要他所想要的。”这句格言从我青年时代起就给了我真正的启示；在我自己和别人的生活面临困难的时候，它总是使我们得到安慰，并且是宽容的持续不断的源泉。这种体会可以宽大为怀地减轻那种容易使人气馁的责任感，也可以防止我们过于严肃地对待自己和别人；它导致一种特别给幽默以应有地位的人生观。</p><p>　　要追究一个人自己或一切生物生存的意义或目的，从客观的角度来看，我总觉得是愚蠢可笑的。可是每个人都有一些理想，这些理想决定着他的努力和判断的方向。就在这个意义上，我从来不把安逸和享乐看作生活目的本身──我把这种伦理基础叫做“猪栏的理想”。照亮我的道路，是善、美和真。要是没有志同道合者之间的亲切感情，要不是全神贯注于客观世界──那个在艺术和科学工作领域里永远达不到的对象，那么在我看来，生活就会是空虚的。我总觉得，人们所努力追求的庸俗目标──财产、虚荣、奢侈的生活──都是可鄙的。</p><p>　　我有强烈的社会正义感和社会责任感，但我又明显地缺乏与别人和社会直接接触的要求，这两者总是形成古怪的对照。我实在是一个“孤独的旅客”，我未曾全心全意地属于我的国家、我的家庭、我的朋友，甚至我最为接近的亲人；在所有这些关系面前，我总是感觉到有一定距离而且需要保持孤独──而这种感受正与年俱增。人们会清楚地发觉，同别人的相互了解和协调一致是有限度的，但这不值得惋惜。无疑，这样的人在某种程度上会失去他的天真无邪和无忧无虑的心境；但另一方面，他却能够在很大程度上不为别人的意见、习惯和判断所左右，并且能够避免那种把他的内心平衡建立在这样一些不可靠的基础之上的诱惑。</p><p>　　我的政治理想是民主政体。让每一个人都作为个人而受到尊重，而不让任何人成为被崇拜的偶像。我自己一直受到同代人的过分的赞扬和尊敬，这不是由于我自己的过错，也不是由于我自己的功劳，而实在是一种命运的嘲弄。其原因大概在于人们有一种愿望，想理解我以自已微薄的绵力，通过不断的斗争所获得的少数几个观念，而这种愿望有很多人却未能实现。我完全明白，一个组织要实现它的目的，就必须有一个人去思考，去指挥、并且全面担负起责任来。但是被领导的人不应当受到强迫，他们必须能够选择自己的领袖。在我看来，强迫的专制制度很快就会腐化堕落。因为暴力所招引来的总是一些品德低劣的人；而且我相信，天才的暴君总是由无赖来继承的，这是一条千古不易的规律。就是由于这个缘故，我总强烈地反对今天在意大利和俄国所见到的那种制度。像欧洲今天所存在的情况，已使得民主形式受到怀疑，这不能归咎于民主原则本身，而是由于政府的不稳定和选举制度中与个人无关的特征。我相信美国在这方面已经找到了正确的道路。他们选出了一个任期足够长的总统，他有充分的权力来真正履行他的职责。另一方面，在德国政治制度中，为我所看重的是它为救济患病或贫困的人作出了可贵的广泛的规定。在人生的丰富多彩的表演中，我觉得真正可贵的，不是政治上的国家，而是有创造性的、有感情的个人，是人格；只有个人才能创造出高尚的和卓越的东西，而群众本身在思想上总是迟钝的，在感觉上也总是迟钝的。</p><p>　　讲到这里，我想起了群众生活中最坏的一种表现，那就是使我厌恶的军事制度。一个人能够洋洋得意的随着军乐队在四列纵队里行进，单凭这一点就足以使我对他鄙夷不屑。<code>他所以长了一个大脑，只是出于误会；光是骨髓就可满足他的全部需要了</code>。文明的这种罪恶的渊薮，应当尽快加以消灭。任人支配的英雄主义、冷酷无情的暴行，以及在爱国主义名义下的一切可恶的胡闹，所有这些都使我深恶痛绝！在我看来，战争是多么卑鄙、下流！我宁愿被千刀万剐，也不愿参与这种可憎的勾当。尽管如此，我对人类的评价还是十分高的。我相信，要是人民的健康感情没有遭到那些通过学校和报纸而起作用的商业利益和政治利益的蓄意败坏，那么战争这个妖魔早就该绝迹了。</p><p>　　我们能拥有的最美好的体验是探求奥秘的体验。它是坚守在真正艺术和真正科学发源地上的基本感情。谁要是体会不到它，谁要是不再有好奇心，也不再有惊讶的感觉，谁就无异于行尸走肉，他的眼睛便是模糊不清的。就是这种奥秘的体验──虽然掺杂着恐惧──产生了宗教。我们认识到有某种为我们所不能洞察的东西存在，感觉到那种只能以其最原始的形式接近我们的心灵的最深奥的理性和最灿烂的美──正是这种认识和这种情感构成了真正的宗教感情；在这个意义上，而且也只是在这个意义上，我才是一个具有深挚的宗教感情的人。我无法想象存在这样一个上帝，它会对自己的创造物加以赏罚，会具有我们在自己身上所体验到的那种意志。我不能也不愿去想象一个人在肉体死亡以后还会继续活着；让那些脆弱的灵魂，由于恐惧或者由于可笑的唯我论，去拿这种思想当宝贝吧！我自己只求满足于生命永恒的奥秘，满足于觉察现存世界的神奇结构，窥见它的一鳞半爪，并且以诚挚的努力去领悟在自然界中显示出来的那个理性的一部分，倘若真能如此，即使只领悟其极小的一部分，我也就心满意足了。</p><hr><p>The World as I See It</p><p>A. Einstein</p><p>"How strange is the lot of us mortals! Each of us is here for a brief sojourn; for what purpose he knows not, though he sometimes thinks he senses it. But without deeper reflection one knows from daily life that one exists for other people -- first of all for those upon whose smiles and well-being our own happiness is wholly dependent, and then for the many, unknown to us, to whose destinies we are bound by the ties of sympathy. A hundred times every day I remind myself that my inner and outer life are based on the labors of other men, living and dead, and that I must exert myself in order to give in the same measure as I have received and am still receiving...</p><p>"I have never looked upon ease and happiness as ends in themselves -- this critical basis I call the ideal of a pigsty. The ideals that have lighted my way, and time after time have given me new courage to face life cheerfully, have been Kindness, Beauty, and Truth. Without the sense of kinship with men of like mind, without the occupation with the objective world, the eternally unattainable in the field of art and scientific endeavors, life would have seemed empty to me. The trite objects of human efforts -- possessions, outward success, luxury -- have always seemed to me contemptible.</p><p>"My passionate sense of social justice and social responsibility has always contrasted oddly with my pronounced lack of need for direct contact with other human beings and human communities. I am truly a 'lone traveler' and have never belonged to my country, my home, my friends, or even my immediate family, with my whole heart; in the face of all these ties, I have never lost a sense of distance and a need for solitude..."</p><p>"My political ideal is democracy. Let every man be respected as an individual and no man idolized. It is an irony of fate that I myself have been the recipient of excessive admiration and reverence from my fellow-beings, through no fault, and no merit, of my own. The cause of this may well be the desire, unattainable for many, to understand the few ideas to which I have with my feeble powers attained through ceaseless struggle. I am quite aware that for any organization to reach its goals, one man must do the thinking and directing and generally bear the responsibility. But the led must not be coerced, they must be able to choose their leader. In my opinion, an autocratic system of coercion soon degenerates; force attracts men of low morality... The really valuable thing in the pageant of human life seems to me not the political state, but the creative, sentient individual, the personality; it alone creates the noble and the sublime, while the herd as such remains dull in thought and dull in feeling.</p><p>"This topic brings me to that worst outcrop of herd life, the military system, which I abhor... This plague-spot of civilization ought to be abolished with all possible speed. Heroism on command, senseless violence, and all the loathsome nonsense that goes by the name of patriotism -- how passionately I hate them!</p><p>"The most beautiful experience we can have is the mysterious. It is the fundamental emotion that stands at the cradle of true art and true science. Whoever does not know it and can no longer wonder, no longer marvel, is as good as dead, and his eyes are dimmed. It was the experience of mystery -- even if mixed with fear -- that engendered religion. A knowledge of the existence of something we cannot penetrate, our perceptions of the profoundest reason and the most radiant beauty, which only in their most primitive forms are accessible to our minds: it is this knowledge and this emotion that constitute true religiosity. In this sense, and only this sense, I am a deeply religious man... I am satisfied with the mystery of life's eternity and with a knowledge, a sense, of the marvelous structure of existence -- as well as the humble attempt to understand even a tiny portion of the Reason that manifests itself in nature."</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/05/15关于人生--我的世界观/../../../images/photos/2020/016.jpg&quot; width=&quot;66%&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;geyan&quot;&gt; 世上只有一种英雄主义——就是在认清生活的真相之后依然热爱生活 ——罗曼.罗兰 （作家 诺贝尔奖得主） &lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="读书" scheme="https://simuty.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="文章" scheme="https://simuty.com/categories/%E8%AF%BB%E4%B9%A6/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="人生" scheme="https://simuty.com/tags/%E4%BA%BA%E7%94%9F/"/>
    
      <category term="文章" scheme="https://simuty.com/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>判断推理-图形</title>
    <link href="https://simuty.com/2020/05/15%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86-%E5%9B%BE%E5%BD%A2/"/>
    <id>https://simuty.com/2020/05/15判断推理-图形/</id>
    <published>2020-05-15T02:37:30.000Z</published>
    <updated>2020-05-17T05:36:19.385Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/05/15判断推理-图形/../../../images/photos/2020/017.jpg" width="70%"></p><p><span class="geyan"> 恐惧让你沦为囚犯，希望让你重获自由。<br> Fear can hold you prisoner, hope can set you free.<br> --《肖申克的救赎》 </span> <a id="more"></a></p><p>图形推理四大题型</p><ol type="1"><li>图形推理</li><li>类比推理</li><li>定义判断</li><li>逻辑判断</li></ol><h2 id="第一部分-图形推理">第一部分 图形推理</h2><p><img src="/2020/05/15判断推理-图形/04.png" width="30%"></p><ol type="1"><li>考点<ol type="1"><li>位置规律</li><li>样式规律</li><li>属性规律</li><li>数量规律</li><li>空间重构</li></ol></li><li>快速定位<strong>图形特征</strong></li></ol><h3 id="第一节-位置规律">第一节 位置规律</h3><p><span id="inline-blue"> 特征： 元素组成相同 </span></p><p><span id="inline-purple"> 考点 -- 平移 </span></p><ol type="1"><li><strong>方向</strong><ol type="1"><li>直线： 上下、左右、对角线</li><li>绕圈：顺、逆时针</li></ol></li><li><strong>步数</strong><ol type="1"><li>恒定、递增（等差）</li></ol></li></ol><p><img src="/2020/05/15判断推理-图形/05.png" width="60%"> <img src="/2020/05/15判断推理-图形/06.png" width="60%"> <img src="/2020/05/15判断推理-图形/07.png" width="60%"> <img src="/2020/05/15判断推理-图形/08.png" width="60%"> <img src="/2020/05/15判断推理-图形/09.png" width="60%"></p><p><img src="/2020/05/15判断推理-图形/10.png" width="60%"> <img src="/2020/05/15判断推理-图形/11.png" width="60%"> <img src="/2020/05/15判断推理-图形/12.png" width="60%"></p><p><span id="inline-purple"> 考点 -- 旋转、翻转 </span></p><p><img src="/2020/05/15判断推理-图形/13.png" width="60%"> <img src="/2020/05/15判断推理-图形/14.png" width="60%"></p><p><img src="/2020/05/15判断推理-图形/15.png" width="60%"></p><p><img src="/2020/05/15判断推理-图形/16.png" width="60%"> <img src="/2020/05/15判断推理-图形/17.png" width="60%"></p><h3 id="第二节-样式规律">第二节 样式规律</h3><p><span id="inline-blue"> 特征： 元素组成<strong>相似</strong></span></p><p><img src="/2020/05/15判断推理-图形/18.png" width="60%"></p><p><span id="inline-purple">考点</span></p><ol type="1"><li>遍历</li></ol><p><img src="/2020/05/15判断推理-图形/19.png" width="60%"> <img src="/2020/05/15判断推理-图形/20.png" width="60%"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/05/15判断推理-图形/../../../images/photos/2020/017.jpg&quot; width=&quot;70%&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;geyan&quot;&gt; 恐惧让你沦为囚犯，希望让你重获自由。&lt;br&gt; Fear can hold you prisoner, hope can set you free.&lt;br&gt; --《肖申克的救赎》 &lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="判断推理" scheme="https://simuty.com/categories/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/"/>
    
      <category term="公考" scheme="https://simuty.com/categories/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%85%AC%E8%80%83/"/>
    
    
      <category term="图形" scheme="https://simuty.com/tags/%E5%9B%BE%E5%BD%A2/"/>
    
  </entry>
  
  <entry>
    <title>言语理解-积累</title>
    <link href="https://simuty.com/2020/05/14%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3-%E7%A7%AF%E7%B4%AF4/"/>
    <id>https://simuty.com/2020/05/14言语理解-积累4/</id>
    <published>2020-05-14T07:37:30.000Z</published>
    <updated>2020-05-17T05:36:26.871Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/05/14言语理解-积累4/../../../images/photos/2020/015.jpg" width="80%"></p><p><span class="geyan"> 君子之学也，入乎耳，着乎心——《荀子·劝学》 </span> <a id="more"></a></p><blockquote><p>很惭愧的是，到现在都分不清楚汉语的语法 知识终究是要还的！</p></blockquote><h2 id="第一部分-语法">第一部分 语法</h2><h3 id="构成方式分类">构成方式分类</h3><p>按词性分类</p><ol type="1"><li><strong>实词</strong><ol type="1"><li><code>名词</code>：<code>表示人或事物名称的词</code><ol type="1"><li>如：学生、猎豹、上午、东南</li></ol></li><li><code>动词</code>：表示动作行为，发展变化，可能意愿及心理活动的词<ol type="1"><li>行为动词：跑、唱、喝、敲、吆喝、盯、踢、闻、听、摸……</li><li>发展动词：生长、枯萎、发芽、结果、产卵……</li><li>心理动词：喜欢、恨、气愤、觉得、思考、厌恶……</li><li>存现动词：消失、显现、有、丢失、幻灭……</li><li>使令动词：使、让、令、禁止、勒令……</li><li>能愿动词：会、愿意、可以、能够、宁可……</li><li>趋向动词：来、去、上、下……</li><li>判断动词：是、为、乃……</li></ol></li><li><code>形容词</code>：表示事物性质、状貌特征的词，<ol type="1"><li>表示形状的：大、高、胖、瘪、细、壮……</li><li>表示性质的：甜、好、香、漂亮、圆滑、机智、单调……</li><li>表示状态的：快、浓、满、多、迅速、悄悄……</li></ol></li><li>数词：表示事物数目的词，有：<ol type="1"><li>汉语语法史</li><li>汉语语法史</li><li>确数词：1、2、3、一、二、三、壹、贰、叁、二分之一、3.45……</li><li>概数：几、一些、左右、以下、余……</li><li>序数：第一、第二、老大、老三、初九、初十……</li></ol></li><li>量词：表示事物或动作的单位，有：<ol type="1"><li>名量词：尺、寸、里、公里、斤、两、辆、角、元……</li><li>动量词：把、次、趟、下、回、声、脚、幢、座……</li><li>时量词：天、年、秒、小时、分（钟）。</li></ol></li><li><code>代词</code>：能代替事物名称的词，有：<ol type="1"><li>人称代词：我、你、它、她们、大家、咱们……</li><li>疑问代词：谁、什么、怎么、哪里、为什么、何以……</li><li>指示代词：这、那、那里、那边，这边……</li></ol></li></ol></li><li><strong>虚词</strong><ol type="1"><li><code>副词</code>， 起修饰或<code>限制动词或形容词</code>作用、表程度或范围的词，有：<ol type="1"><li>程度副词：很、极、非常、太、过分……</li><li>时间副词：已、刚、才、将、要……</li><li>范围副词：都、全、总、只、仅……</li><li>情态副词：正好、果然、刚好、依然、全然、悄然……</li><li>语气副词：准保、确实、不、没有、岂、难道、尤其、甚至、绝对……</li><li>重复副词：又、再、还、仍……</li></ol></li><li><code>介词</code>，用在名词、代词或名词性词组前边，合起来表示方向、对象等的<ol type="1"><li>如：从、往、在、当、把、对、同、为、以、比、跟、被、由于、除了。</li></ol></li><li>连词，连接词。连接短语或句子的词，<ol type="1"><li>如：和、同、跟、不但、并且、只要、而且、与其、尚且。</li></ol></li><li>助词，附着在别的词后面、独立性差、无实义的一种特殊的虚词，有：<ol type="1"><li>结构助词：的、地、得、所……</li><li>时态助词：着、了、过……</li><li>语气助词：呢、吧、吗、哟、哩、呀、啥……</li></ol></li><li>叹词，表示感叹或者呼唤答应的词，<ol type="1"><li>如：啊、哎、哦、噢、哼、呸、呀。</li></ol></li><li>拟声词，模拟事物的声音的词，<ol type="1"><li>如：哗哗、轰隆隆、淅淅沥沥、咚咚、噼里啪啦、哗啦啦、滴答、喔喔、旺旺、喵喵、唧唧、叽叽喳喳、啪啪。</li></ol></li></ol></li></ol><h3 id="文法的语序">文法的语序</h3><p><strong>主谓宾结构</strong>为一种文法的语序，即语法顺序为<code>主语—谓语—宾语</code>的结构。</p><ol type="1"><li>主语<ol type="1"><li>主语表示句子主要说明的<code>人或事物</code>，一般由名词，代词，数词，不定式等充当。</li></ol></li><li>谓语<ol type="1"><li>谓语说明主语的<code>动作、状态或特征</code>。</li></ol></li><li>宾语<ol type="1"><li>宾语<code>表示动作行为</code>的对象，跟在及物动词之后，能作宾语的有名词，代词，数词，动词不定式等。</li></ol></li></ol><p>主语是执行句子的行为或动作的主体，如<code>“我写字”</code>中</p><ol type="1"><li>“我”，就是主语，它做“写”这个动作。</li><li>“写”则是谓语</li><li>而“字”是接受谓语“写”这个动作的对象，它因此被称为宾语，</li></ol><p>又如”花死了”中的”花”就是主语，”死了”即是对主语”花”的陈述，所以是谓语．有的语法书也称主语为“客体”或“受体”。</p><p><img src="/2020/05/14言语理解-积累4/04.jpg"></p><h2 id="第二部分-词汇">第二部分 词汇</h2><p><strong>参考文章</strong></p><p><a href="https://zhuanlan.zhihu.com/p/21367822" target="_blank" rel="noopener">我想这样讲“词性和句子成分”</a> <a href="https://zhuanlan.zhihu.com/p/40365328" target="_blank" rel="noopener">句子的成分：主谓宾定状补分析</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/05/14言语理解-积累4/../../../images/photos/2020/015.jpg&quot; width=&quot;80%&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;geyan&quot;&gt; 君子之学也，入乎耳，着乎心——《荀子·劝学》 &lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="公考" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/"/>
    
      <category term="言语理解" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/"/>
    
    
      <category term="言语理解" scheme="https://simuty.com/tags/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>言语理解-考点2</title>
    <link href="https://simuty.com/2020/05/13%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3-%E8%80%83%E7%82%B93/"/>
    <id>https://simuty.com/2020/05/13言语理解-考点3/</id>
    <published>2020-05-13T07:37:30.000Z</published>
    <updated>2020-05-17T05:37:00.570Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/05/13言语理解-考点3/../../../images/photos/2020/014.jpg" width="80%"></p><p><span class="geyan"> 虽有戈矛之刺，不如恭俭之利也。故与人善言，暖于布帛；伤人之言，深于矛戟（《荀子·荣辱》） </span> <a id="more"></a></p><h2 id="第一节-逻辑填空">第一节 逻辑填空</h2><p>【题型分类】</p><ol type="1"><li>实词辨析</li><li>成语辨析 ——高频成语</li><li>关联词辨析 ——关联词语</li></ol><p>【做题原则】</p><ol type="1"><li>排除选项<ol type="1"><li>感情色彩：贬义/褒义；<strong>倾向性</strong>（<code>积极/消极</code>）<ol type="1"><li>如果确定了倾向性，对比答案，排除不一致的</li></ol></li><li><strong>语义轻重</strong>：<ol type="1"><li>批评/批判；损坏/破坏；骚动/骚乱；妨碍/妨害；</li></ol></li><li>表达风格：语体风格；文体风格；俗语和正式语需要根据文本来决定</li></ol></li><li>确定答案<ol type="1"><li>搭配范围</li><li>语素差异</li><li>词性功能</li></ol></li></ol><blockquote><p>剩余的就好好补欠的语文词汇吧</p></blockquote><h2 id="第二节-成语解析">第二节 成语解析</h2><blockquote><p>欠的还是要还的。 剩余的就好好补欠的语文词汇吧</p></blockquote><h2 id="第三节-篇章阅读">第三节 篇章阅读</h2><p>【文章载体】</p><ol type="1"><li><p>社会科学类</p></li><li><p>科技说明类</p></li></ol><p>【考查题型】</p><ol type="1"><li>词句理解题<ol type="1"><li>词语理解题</li><li>语句理解题</li></ol></li><li>代词指代题</li><li>细节理解题</li><li>标题填入题</li><li>语句衔接题</li><li>逻辑填空题</li><li>病句解析题</li></ol><p>【做题原则】</p><ol type="1"><li>带着问题选择性阅读原文<ol type="1"><li>先作答能够在文中快速明确定位有效信息的题目<ol type="1"><li>看哪个<strong>明显</strong>，直接能在文段中找到，在就近就可以看到答案的<ol type="1"><li>如：横线、代词、逻辑填空等</li></ol></li><li>综合分析、<strong>通读文章</strong><ol type="1"><li>如：主旨概括题、意图判断题、细节判断题</li></ol></li></ol></li></ol></li><li>关注文章、段落六大要点<ol type="1"><li>文章、段落<code>首尾句</code></li><li>每个段落<strong>首句之间</strong>的关系</li><li>转折、递进、结论、条件等引出主题句和观点</li><li>标点符号引出的语句信息：<ol type="1"><li>分号、顿号 <strong>并列关系</strong></li><li>双引号 <code>反语、援引、强调</code></li><li>问号 <strong>设问、疑问、反问</strong></li><li>破折号、冒号 <strong>解释说明</strong></li></ol></li><li>援引中的<code>正向</code>援引</li><li>略读：人名、数字、英文、术语。</li></ol></li></ol><p>【篇章范例一】</p><p><strong>知识</strong>经济的发展无疑给发展中国家带来赶超发达国家的巨大机遇（如可以借鉴发达国家 的经验，缩短工业化阶段的进程，即发挥后发优势），但同时也使这些国家面临严峻挑战。</p><p><strong>挑战</strong>首先来自“知识”这一生产要素本身。经济学家保罗·罗默指出，知识的生产、应用 和扩散的效率与知识的积累及人力资本正相关。而正是在这两点，发展中国家同发达国家存 在着巨大差距，这种差距虽然使发展中国家在知识的选择和应用方面可以有较大的回旋余地， 但同时使得他们与发达国家在国际分工中因位势的不同形成垂直分工的关系，因而处于不利 地位，甚至随着新的技术壁垒的形成而形成新的“中心—依附”关系，加大贫富差距。例如， 有迹象表明，近 20 年来，在全球的收入分配方面，情况逐渐恶化。从 1960 年到 80 年代末， 世界人均国民生产总值（以购买力平价计算）的基尼系数呈上升趋势，从 1960 年的 0.44 到 1989 年的 0.55。又据统计，世界最富的 20%的人口的所得收入与最穷的 20%的人口的收入 比从 1960 年的 11.1∶1 增加到 1989 年的 17.1∶1。可见，全球增长的好处并没有平均扩散 到所有国家，贫富差距还在加大。正如托夫勒所说：“知识的分配比武器和财富的分配更不 平等。因此知识（尤其是关于知识的知识）的重新分配更加重要。它能改变其他主要权力资 源的分配。”</p><p><strong>挑战</strong>更来自自身准备的不足，因为 。知识经济对于已完成工业化的发达国家而 言是生产力发展的自然结果，顺理成章；对于首先要通过工业化改变二元经济结构的发展中 国家而言，则意味着要不甘落后、抓住机遇，就必须将工业化与知识化两步并作一步走，即 如果说在上一个百年，后发国家还有可能通过加速工业化过程追赶发达国家，那么在当今新 的世纪交替之际，由于科学技术的加速发展以及科技进步转化为经济增长的过程不断加快， 后发国家已经没有了从容实现工业化的可能。发展中国家面临的挑战显然更加严峻。</p><p><strong>中国</strong>正处在从计划经济向社会主义市场经济体制转变的过程中，这使得在应对知识经济 的挑战、加速发展的同时，还必须完成制度的变革，因而任务异常艰巨。</p><p><strong>我们</strong>初步实现了邓小平同志提出的“三步走”战略的前两步目标，正在开始实施第三步战 略。与前两步战略相比，第三步战略不是自己和自己的比较，不是要达到“温饱”“小康”这样 相对明确的指标，而是要“达到中等发达国家水平”。这是一个更加开放的、[a]指标，因而也 是一个更加艰巨的任务。</p><p><strong>目前</strong>，与发达国家相比，我国还没有摆脱传统产业的束缚，经济增长方式仍以外延扩张为主，以消耗稀缺自然资源和污染环境为代价。尽管我们多次强调“经济增长方式的根本转 变”，但是，以高技术为产业支柱，以智力资源为主要的新型经济，还没有成为我国内涵式 经济增长方式的主题，就全国范围而言，以高科技为基础的第三产业就业人员占全国就业人 员总数不到 5%，其产值占国内生产总值不到 15%，以知识密集型为主的服务贸易出口占全 部出口不到 10%。但是，这并不意味着中国不具备发展知识经济的条件。就整体而言，由于 中国东西部经济发展的非均衡性，东部沿海地区某些大城市在某些方面还是具有发展知识经 济的条件的。</p><p><code>1. 知识经济对于发展中国家的挑战主要来自（ ）。</code></p><ol type="1"><li>知识的生产、应用和扩散的效率与知识的积累及人力资本正相关</li><li>发展中国家在知识的积累和人力资本方面落后于发达国家</li><li>发展中国家面临更多的制度问题</li><li>发展中国家自身准备不足</li></ol><p><code>2. 与知识经济比较而言，工业化经济发展最大的弊端是（ ）。</code></p><ol type="1"><li>消耗稀缺的资源、污染环境</li><li>造成了全球贫富差距过大</li><li>形成了技术壁垒</li><li>无法拉开发达与发展中国家的差距</li></ol><p><code>3. 从对待机遇的角度看，发展中国家应当如何应对知识经济的挑战？（ ）</code></p><ol type="1"><li>注意知识的积累</li><li>工业化和知识化并进</li><li>发展新型经济</li><li>快速实现体制改变</li></ol><p><code>4. 下列说法，不符合全文意思的一项是（ ）。</code></p><ol type="1"><li>知识经济是以知识为基础的经济，它的核心在于创新</li><li>知识经济既有正面效应，也有负面效应</li><li>当代经济的发展紧密地依赖知识的生产、传播和应用</li><li>知识在现代经济发展中对其他资源具有强大支配力、控制力、渗透力</li></ol><p><code>5. 下列对我国的现状描述正确的一项是（ ）。</code></p><ol type="1"><li>我国东部广大沿海地区已经具备发展知识经济的某些有利条件</li><li>我国只有西部地区还没有摆脱传统产业的束缚</li><li>我国西部地区没有以高技术为产业支柱的新型经济</li><li>中国部分地区已经初步具备发展知识经济的条件</li></ol><p><code>6. 文中[a]处应填入的词语是（ ）。</code></p><ol type="1"><li>艰巨的</li><li>活跃的</li><li>紧迫的</li><li>动态的</li></ol><p><code>7．下列选项适合作为本文结束语的一项是（)</code></p><ol type="1"><li>知识经济的时代已经来临</li><li>总之，面对知识经济带来的挑战，我们必须认真对待</li><li>总之，我们必须发展知识经济</li><li>知识经济真是让人欢喜，让人忧呀</li></ol><p><code>8．根据上文，下列对基尼系数表述不正确的一项是（)</code></p><ol type="1"><li>基尼系数为 0，则表示收入分配完全平等</li><li>基尼系数是衡量分配平等程度的指标</li><li>基尼系数越高，收入的差距则越悬殊</li><li>基尼系数是最富有人群的收入和最贫困人群收入的比值</li></ol><p><code>9．下列选项中，适合填在文中横线上的一项是（ ）。</code></p><ol type="1"><li>路遥知马力</li><li>磨刀不误砍柴工</li><li>机会只偏爱有准备者</li><li>只有站在巨人的肩上才能看得更远</li></ol><p><span id="inline-purple"> 解题步骤: 先确定问题、先容后难、拆解为小题目 </span></p><ol type="1"><li>先读题目，确定哪些先做后做</li><li>先写可以不通读解决的题目</li><li>读题目的时候，遇到某个问题，就回头再看下题目，再继续读</li></ol><p><strong>答案</strong> 1-5 DABAD 5-9 DBDC</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/05/13言语理解-考点3/../../../images/photos/2020/014.jpg&quot; width=&quot;80%&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;geyan&quot;&gt; 虽有戈矛之刺，不如恭俭之利也。故与人善言，暖于布帛；伤人之言，深于矛戟（《荀子·荣辱》） &lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="公考" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/"/>
    
      <category term="言语理解" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/"/>
    
      <category term="考点" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%80%83%E7%82%B9/"/>
    
    
      <category term="言语理解" scheme="https://simuty.com/tags/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>言语理解-考点1</title>
    <link href="https://simuty.com/2020/05/10%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3-%E8%80%83%E7%82%B92/"/>
    <id>https://simuty.com/2020/05/10言语理解-考点2/</id>
    <published>2020-05-11T07:37:30.000Z</published>
    <updated>2020-05-17T05:36:56.410Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/05/10言语理解-考点2/../../../images/photos/2020/012.jpg" width="80%"> <span class="geyan"> 望时而待之，孰与应时而使之。（《荀子·天论》） </span> <a id="more"></a></p><h2 id="第一节-片段阅读">第一节 片段阅读</h2><h3 id="主旨概括--关联词语">主旨概括--关联词语</h3><blockquote><p>言语理解中的重点 基础、重点</p></blockquote><p>✅<code>标志</code></p><ol type="1"><li>这段话主要讲述（谈论、强调、说明、阐明、阐述、介绍）的是？</li><li>这段文字的主旨、关键词、中心议题、旨在说明什么？</li><li>对这段文字的<code>概括（复述、归纳、总结）</code>最准确的是？</li></ol><p>🚩做题的原则</p><ol type="1"><li>找题眼，文段主题句</li><li>对比选项进行转换，【同意替换、精简压缩】</li><li>通常为对策或核心观点<ol type="1"><li>题眼为问题，找对策</li><li>题眼为观点，归纳核心观点</li></ol></li><li>优选忠于原文的题眼的选项。</li></ol><p>🚩解题技巧</p><ol type="1"><li>宏观--<code>行文脉络</code>--&gt; 文章结构</li><li>微观--<code>关联词</code> --&gt; 逻辑标志</li></ol><p><img src="/2020/05/10言语理解-考点2/04.png" style="zoom: 50%;"></p><h4 id="转折复句">转折复句</h4><p>【典型格式】</p><p>➢ 虽然……但是……</p><p>➢ 其实=事实上=实际上=只是=当然</p><p>【关联词语】 ➢ 虽然=尽管=虽说=固然</p><p>➢ 但是=可是=不过=然而=却</p><p>【总结】</p><p><code>重点在转折之后</code></p><p><img src="/2020/05/10言语理解-考点2/05.png" style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/05.png" style="zoom: 50%;"></p><h4 id="结论复句">结论复句</h4><p>【典型格式】</p><p>因为……所以……</p><p>【关联词语】</p><p>➢ 因为=由于</p><p>➢ 所以=因此=因而=可见=看来=导致=造成=<code>使得</code>=致使=总之=故而=<code>言而总之</code>=综上所述=概而言之=<code>概而论之</code></p><p>【特殊格式】</p><p><code>之所以……是因为。..</code> ===&gt; <code>强调原因</code></p><p>【典型例句】</p><ol type="1"><li>物价上涨关系到每一个消费者的切身利益，影响着相当一部分普通百姓的日常生活，并且可能给低收入家庭带来沉重压力。<code>因此</code>对物价上涨不能掉以轻 心。</li></ol><p>2.《淮南子·人间训》云：“众人皆知利利而病病，唯圣人知病之为利，利之为病 也。”<code>看来</code>古人已经注意到利弊的辩证关系。</p><p><img src="/2020/05/10言语理解-考点2/07.png" title="答案：D" style="zoom: 50%;"></p><p><code>于是</code>的作用</p><ol type="1"><li>结论</li><li>顺城时间、背景；</li></ol><p><img src="/2020/05/10言语理解-考点2/08.png" title="答案：D" style="zoom: 50%;"></p><h4 id="递进复句">递进复句</h4><p>【典型格式】</p><p>不但……而且…… 如：大别山区不但矿产很丰富，而且自然景色很美。</p><p>【关联词语】</p><p>➢ 不但=不仅=不单=不独=不只=不光</p><p>➢ 而且=并=并且=也=还</p><p>➢ 甚至=更=特别=尤其=重要的是=关键的是=核心的是</p><p>【多重递进】</p><p>不但……而且……甚至……</p><p>【典型例句】</p><ol type="1"><li>黄金<code>不只</code>是一种名贵的金属，<code>也是一种不需要翻译的万能语言</code>。</li><li>寿昌<code>不仅</code>学习戏里的唱腔身段，<code>还从母亲那里弄些碎布学剪戏中的人物</code>。</li><li>来这家大型食品超市购物的不仅有当地的家庭主妇，而且有附近街区的居民，<code>甚至京津地区也有驱车前来采购的</code>。</li></ol><p>【总结】</p><ol type="1"><li>递进复句重点在递进之后</li><li>一级递进与二级递进同时出现，<code>二级递进是重点</code></li></ol><p><img src="/2020/05/10言语理解-考点2/09.png" title="答案：C" style="zoom: 50%;"></p><p>这个题目的答案是 C，<code>但是选择了 D，是因为看到了最后一句话</code></p><p>经过对比</p><ol type="1"><li>要说的是雷锋相关，D 项说的是人们</li><li>任何时代，这个过于夸大</li><li>在 C、D 中选择，C 项更合适。</li></ol><p><img src="/2020/05/10言语理解-考点2/10.png" title="自己的思路" style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/11.png" title="答案：D" style="zoom: 50%;"></p><p>✅解题过程</p><ol type="1"><li>确定了主题词--汽车行业，递进-不仅-而且，重点在后边，</li><li>得出结论 汽车行业 &amp; 相关产业 的关系。</li></ol><p>❌错误分析</p><ol type="1"><li>整体找的重点没有错</li><li>递进之后很长，需要概括，不能直接取其中一部分，就要对比选项。</li><li>A B 是部分，C 是背景</li><li>D 是完整的<code>概括递进之后的内容</code></li></ol><h4 id="必要条件复句">必要条件复句</h4><p>【典型格式】</p><p>只有…【<code>重点</code>】…才……</p><p>【关联词语】</p><p>显性：只有=必须=<code>需要</code>=应该=<code>应当</code>=务必=<code>除非</code>=如何=<code>怎样</code>等</p><p>隐性：<code>才</code></p><p>【典型例句】</p><ol type="1"><li>传统相声艺术只有<code>回到群众，回归生活</code>，才能获得新的生命力。</li><li>汽车企业在发展的同时采取新的技术措施，尽量减少对环境的污染，符合社会发展大趋势，<code>才</code>是长久之策。</li></ol><p>【总结】</p><ol type="1"><li>重点是<code>必要条件</code></li><li>主要找 <code>才</code>， 显性/隐性 都在<code>才</code>之前</li></ol><p>【转换格式】</p><p><code>只有 A，才 B</code></p><p>B 必须 A = 不 A 则不 B = A 是 B 的必要条件（必备要素、不可 或缺、必不可少、前提、基础、保证、保障） = <code>B 以 A 为必要条件</code></p><p><img src="/2020/05/10言语理解-考点2/12.png" title="答案：C" style="zoom: 50%;"></p><p>✅解题过程&amp;注意事项⚠️</p><ol type="1"><li>主题词、重点位置找对了，思路也还行。</li><li>根据主题词，可以排除 A D，【可以优化思路--排除】</li><li><code>快速读题</code>有待加强</li></ol><p><img src="/2020/05/10言语理解-考点2/13.png" title="答案：B" style="zoom: 50%;"></p><h4 id="并列复句">并列复句</h4><p>【典型格式】</p><blockquote><p>既……又……</p></blockquote><p><code>申论也可以用</code></p><p>1．表示相关的几种情况<code>并存</code>。</p><p>【关联词语】</p><p>单用：而=又=同样=同时=与此同时=<code>另外</code>=此外=<code>再说</code>=并且=<code>加上</code>等。</p><p>双用：也……也；<code>又……又</code>；既……又；一边……一边；<code>有的……有的</code>；一方面…… 另一方面。</p><p>2．表示两种<code>相反或相对</code>的情况。</p><p>【关联词语】</p><p>不是……而是：不是 A，而是 B =》 A = -B</p><p>有的……有的</p><p>【表现形式】</p><ol type="1"><li>关联词语</li><li>标点符号：顿号、分号、逗号（句式一致）</li><li>表达并列内容的分句关系（隐性并列，藏于句中）</li></ol><p>【总结】</p><ol type="1"><li>重点：没有重点，主旨是 A + B</li><li>没有语序要求，可以调整前后关系</li><li>分句间的并列关系、标点负号的使用。</li></ol><p><img src="/2020/05/10言语理解-考点2/14.png" title="答案：B" style="zoom: 50%;"></p><p>✅解题过程&amp;注意事项⚠️</p><ol type="1"><li>么有找到并列的关键词</li></ol><h3 id="主旨概括--行文脉络">主旨概括--行文脉络</h3><ol type="1"><li>总--分--总<ol type="1"><li>点明观点--阐述原因/举例论证--重申观点 --&gt; <code>重点</code> 首尾句需要结合</li><li>提出问题--分析问题/举例论证--解决问题 --&gt; <code>重点</code> 解决问题</li></ol></li><li>分--总</li><li>总--分</li><li>分--总--分</li></ol><h4 id="总--分--总">总--分--总</h4><p><img src="/2020/05/10言语理解-考点2/15.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/16.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/17.png" title style="zoom: 50%;"></p><h4 id="总--分">总--分</h4><ol type="1"><li>提出观点--解释说明 --&gt; <code>重点</code> 观点</li><li>提出问题--举例论证 --&gt; <code>重点</code> 问题</li></ol><p><img src="/2020/05/10言语理解-考点2/19.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/20.png" title="答案：A" style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/21.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/22.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/24.png" title="答案：D" style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/25.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/26.png" title style="zoom: 50%;"></p><p><span id="inline-blue"> 分论点中的转折不重要 </span></p><h4 id="分--总">分--总</h4><p><img src="/2020/05/10言语理解-考点2/23.png" title="答案：A" style="zoom: 50%;"></p><h4 id="分--总--总">分--总--总</h4><p><img src="/2020/05/10言语理解-考点2/27.png"></p><p><img src="/2020/05/10言语理解-考点2/28.png" title="答案：C" style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/29.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/30.png" title style="zoom: 50%;"></p><h4 id="难度提升">难度提升</h4><blockquote><p>无关键词，需要归纳概括</p></blockquote><p><span id="inline-blue">整体概括法</span> <span id="inline-green"> 关注主体</span> <br> <span id="inline-purple">重现关键词</span> <span id="inline-yellow"> 关注重复出现的词汇</span></p><p><img src="/2020/05/10言语理解-考点2/31.png" title style="zoom: 50%;"></p><blockquote><p>提问方式变化，方法依旧</p></blockquote><ol type="1"><li>关键词语类</li><li>其他提问类</li></ol><p><img src="/2020/05/10言语理解-考点2/32.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/33.png" title style="zoom: 50%;"></p><h3 id="意图判断">意图判断</h3><blockquote><p>意图题基于主旨题</p></blockquote><p><span id="inline-purple">辨别标志</span></p><p>➢ 这段文字意在说明（阐明、强调）的是？</p><p>➢ 通过这段话，作者想表达（说明）的是？</p><p>➢ 通过这段话，我们可以知道？</p><p>➢ 这段话告诉我们？</p><p>➢ 从这段文字中可以推出的是？</p><p>➢ 根据这段文字，可以看出作者的意图是？</p><p><span id="inline-blue">做题原则</span></p><ol type="1"><li>通读原文，把握文段重点</li><li><code>优选</code> 作者的 <code>目的、意图、出发点</code></li><li><code>次选</code> 主旨类型的答案</li><li>排除<code>引申过度</code>、<code>表意肤浅</code>、不符合生活规律、社会主旋律的选贤</li></ol><p><span id="inline-yellow">社会现象类</span></p><h4 id="社会现象类">社会现象类</h4><ol type="1"><li>消极社会问题--针对<code>现象、问题</code>找<code>对策</code></li><li>积极/中性社会问题--总结归纳观点</li></ol><p><img src="/2020/05/10言语理解-考点2/34.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/35.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/36.png" title style="zoom: 50%;"></p><p><span id="inline-green">错误分析</span></p><ol type="1"><li>没有按步骤解题<ol type="1"><li>通读+重点：<code>高房价 生活质量 90后</code></li><li>围绕重点，D项扩大了范围</li><li><strong>意图题选项都得看👀</strong></li></ol></li></ol><p><img src="/2020/05/10言语理解-考点2/37.png" title style="zoom: 50%;"></p><h4 id="故事寓意类">故事寓意类</h4><ol type="1"><li>寓意主体往往在故事<code>3/4</code>处的结尾有所反应，常有<code>于是、后来</code>的词引出故事的高潮；</li><li>寓意选项要与文段关联</li></ol><p><img src="/2020/05/10言语理解-考点2/38.png" title="有趣， 选择：B" style="zoom: 50%;"></p><p>C有点过度了，主要是幽默。</p><p><img src="/2020/05/10言语理解-考点2/39.png" title="有趣， 选择：A" style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/40.png" title="有趣， 选择：D" style="zoom: 50%;"></p><h4 id="排除选项">排除选项</h4><p><img src="/2020/05/10言语理解-考点2/41.png" title style="zoom: 50%;"></p><h4 id="意图判断主旨化两个并非一个标准">意图判断主旨化——两个并非，一个标准</h4><p><img src="/2020/05/10言语理解-考点2/42.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/44.png" title style="zoom: 50%;"></p><h3 id="态度观点">态度观点</h3><p>【辨别标志】</p><p>➢ 作者支持的观点是？</p><p>➢ 作者认为 XXXX 有无道理/是否正确？</p><p>➢ 作者对 XXXX 的态度是？</p><p>➢ 符合作者观点/原意的一项是？</p><p>➢ 下列说法与文章作者态度不符合的是？</p><p>【做题原则】</p><ol type="1"><li>明确观点：提炼引导词 + 抓住关联词<ol type="1"><li>笔者认为、XX认为、我希望等</li></ol></li><li>隐含观点：提炼倾向性<ol type="1"><li>关联词、设问、含有倾向性的词、反问【你怎么能这样】</li></ol></li><li>没有观点：仅为客观陈述<ol type="1"><li>没有任何评价</li></ol></li></ol><p>【杂糅观点的特殊句式】</p><ol type="1"><li>笔者认为A <code>有观点</code>， 至于 B <code>无观点</code> 就见人见智了</li><li>无论A <code>无观点</code> 怎么样，B <code>有观点</code>都怎么样</li></ol><p><img src="/2020/05/10言语理解-考点2/45.png" title="答案 D" style="zoom: 50%;"></p><blockquote><p>这一类题目，仔细分析主旨</p></blockquote><h3 id="细节理解">细节理解</h3><blockquote><p>认真读！ 认真读！</p></blockquote><p>【题目类型】</p><p>➢ 典型的细节理解题</p><p>➢ 主旨化的细节理解题</p><p>【辨别标志】</p><p>➢ 下列说法正确/不正确的一项是？</p><p>➢ 下列表述符合/不符合文意的一项是？</p><p>➢ 下列理解正确/有误的一项是？</p><p>【做题原则】</p><ol type="1"><li>错误选项的特点<ol type="1"><li>无中生有</li><li>曲解文意</li><li>概念混搭</li></ol></li></ol><p><img src="/2020/05/10言语理解-考点2/46.png" title style="zoom: 50%;"></p><h4 id="偷换概念">偷换概念</h4><p>➢ 偷换时态</p><ol type="1"><li>已然性时态：已经、曾经、了、过去、虽然。。。但是<code>【已经发生】</code></li><li>未然性时态：将、要、立即、马上、如果、即使。。也<code>【将要发生】</code></li><li>进行式时态：正、正在、在。。中、现在、着</li></ol><p><img src="/2020/05/10言语理解-考点2/47.png" title style="zoom: 50%;"></p><blockquote><p>任何时态上的偷换，直接就是❌错误！</p></blockquote><p>➢ 偷换数量</p><ol type="1"><li>较多量：较多、许多、大量、大多数、一片、不少等</li><li>较少量：较少、很少、少量、不多</li><li>中间量：某些、一些、部分</li></ol><p><img src="/2020/05/10言语理解-考点2/48.png" title style="zoom: 50%;"></p><p>➢ 偷换逻辑关系</p><ol type="1"><li>充分条件和必要条件的混淆</li><li>因果倒置</li><li>并列混淆为条件或因果关系</li></ol><p><img src="/2020/05/10言语理解-考点2/49.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/50.png" title style="zoom: 50%;"></p><p>➢ 偷换概念/话题</p><p><img src="/2020/05/10言语理解-考点2/51.png" title style="zoom: 50%;"></p><p>➢ 偷换确定性表述与不确定性表述</p><ol type="1"><li>不确定性表达：预测、断言、推测、可能、未必、也许、大概、大约</li><li><strong>科技说明文</strong></li></ol><p><img src="/2020/05/10言语理解-考点2/53.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/54.png" title style="zoom: 50%;"></p><h4 id="主旨化的细节理解题">主旨化的细节理解题</h4><ol type="1"><li>正确表述是对于整个文段的归纳概括</li><li>错误表述是对于原文句子的偷换和曲解</li></ol><p><img src="/2020/05/10言语理解-考点2/55.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/56.png" title style="zoom: 50%;"></p><p><strong>问号</strong></p><ol type="1"><li>设问：有问有答案</li><li>反问：没有回答，但已经回答了</li><li>疑问：提问</li></ol><h4 id="变形的细节理解题">变形的细节理解题</h4><ol type="1"><li>原因考查类：属于原因、不属于原因<ol type="1"><li>了解文段陈述的状况，然后根据<code>“因为、由于” "因此、所以"</code>等词去判断</li></ol></li><li>目的考查类：主要是为了满足、主要作用、其目的是<ol type="1"><li>寻找<code>为了、目的是、其作用为、结果是、</code>等标志词</li></ol></li><li>特点考查类： 最突出的特点、区别主要体现在、差异是<ol type="1"><li>对比陈述主体特征、进行归纳概括</li></ol></li><li>信息推断类：提问方式差异较大<ol type="1"><li>特定语句寻找</li></ol></li></ol><p><img src="/2020/05/10言语理解-考点2/57.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/58.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/59.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/61.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/62.png" title style="zoom: 50%;"></p><h2 id="第二节-语句表达">第二节 语句表达</h2><h3 id="词句理解题">词句理解题</h3><p>【题目类型】</p><ol type="1"><li>词语理解题</li><li>语句理解题<ol type="1"><li>名言警句：短 + 常识判断</li><li>划线语句：小语境</li></ol></li></ol><p>【辨别标志】</p><ol type="1"><li>文中“XXX”如何理解？</li><li>“XXX”指的是？</li></ol><p>【做题原则】</p><ol type="1"><li>定位原文，有效利用<code>冒号、破折号以及关联词</code></li><li>根据<code>上下文、前后句</code>的小语境推测词语含义</li><li>排除<code>字面意思</code></li></ol><p><img src="/2020/05/10言语理解-考点2/63.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/64.png" title style="zoom: 50%;"> <img src="/2020/05/10言语理解-考点2/65.png" title style="zoom: 50%;"> <img src="/2020/05/10言语理解-考点2/66.png" title style="zoom: 50%;"></p><h3 id="词语指代题">词语指代题</h3><p>【辨别标志】</p><p>文中“XXX”<code>指代</code>的是？</p><p>【做题原则】</p><ol type="1"><li>定位原文</li><li><code>就近原则</code>，前后句的<code>主宾</code></li><li>区分类型</li><li>注意提问的提示信息</li></ol><p><img src="/2020/05/10言语理解-考点2/67.png" title="答案：D" style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/68.png" title="答案：D" style="zoom: 50%;"></p><h3 id="语句表达">语句表达</h3><p>【考查能力】</p><p>➢ 规范表达—— 病句辨析题</p><p>➢ 优化表达</p><ol type="1"><li>语句排序题</li><li>语句衔接题</li><li>下文推断题</li></ol><h4 id="语句排序题">语句排序题</h4><p>【辨别标志】</p><p>将以上 6 个句子重新排列，语序正确的是?</p><p>【做题原则】</p><p><img src="/2020/05/10言语理解-考点2/69.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/70.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/71.png" title="答案：B" style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/72.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/73.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/74.png" title style="zoom: 50%;"></p><blockquote><p>寻头不断尾＋差异句判断+紧密度验证</p></blockquote><ol type="1"><li>寻头断尾，AABC，排除BC，<strong>少数服从多数</strong></li><li>在两个AA中，找到第一个不一样的，区分，<strong>时空、关联词、重复词</strong></li></ol><blockquote><p>判断发语词 ＋ 紧密度验证</p></blockquote><ol type="1"><li>援引观点、背景铺垫、设问等常为<strong>发语词</strong></li><li>不适合做发语词<ol type="1"><li>反面论证：否则、不然、如果没有、如果不</li><li>补充类：当然、也、又</li><li>结论类：因此、所以、最终、终于</li><li>指代类表述：这、此</li></ol></li></ol><p><img src="/2020/05/10言语理解-考点2/75.png" title style="zoom: 50%;"> <img src="/2020/05/10言语理解-考点2/76.png" title style="zoom: 50%;"> <img src="/2020/05/10言语理解-考点2/77.png" title style="zoom: 50%;"> <img src="/2020/05/10言语理解-考点2/78.png" title style="zoom: 50%;"></p><p><img src="/2020/05/10言语理解-考点2/79.png" title="好好思索下" style="zoom: 50%;"></p><blockquote><p>解题思路汇总</p></blockquote><ol type="1"><li>对比1&amp;4， 两句话<strong>无法判断</strong>谁做开头</li><li>1的关键词是 【大脑🧠】，4的关键词是【研究】，进而-&gt;整体看<strong>重复词</strong>--大脑</li><li>排除 A B</li><li>1-6 &amp; 1-3 对比，<ol type="1"><li>1-3: <code>太过于紧密</code>，没有喘气的机会，没有解释1的空隙，</li><li>1-6: 紧接1的结尾--环境中有哪些威胁</li><li>6-2: 6的结尾<code>电刺激</code> -&gt; 2中的 回击、逃跑</li></ol></li><li>3中的 <strong>还</strong>， 与 6 <strong>并列</strong></li></ol><p><img src="/2020/05/10言语理解-考点2/80.png" title="好好思索下" style="zoom: 50%;"></p><blockquote><p>解题思路</p></blockquote><ol type="1"><li>对比3-5，都可以做开头</li><li><strong>假设法</strong><ol type="1"><li>假如5开头<ol type="1"><li>5-2: 但是2中的<code>也是</code>，在1中并没有做铺垫，排除D</li><li>5-3: 啰嗦：5: 屈原是。。 3: 屈原是。。排除C</li></ol></li><li>假如3开头<ol type="1"><li>3-2-1-5是相同的</li><li>看 5-4 或是 5-6<ol type="1"><li>5-4: 5的优秀和 <strong>而是</strong>接不上</li><li>5-6: 5的优秀 对应 <strong>学而优则仕</strong></li></ol></li></ol></li></ol></li><li>这道题太麻烦了。。。。</li></ol><p><img src="/2020/05/10言语理解-考点2/81.png" title="好好思索下" style="zoom: 50%;"></p><blockquote><p>解题思路</p></blockquote><ol type="1"><li>四个选项各不相同</li><li>对比选项<ol type="1"><li>3 反面论证的意思 排除B</li><li>5 总，有点像</li><li>6 假设，排除D</li><li>7 最终。。排除A</li></ol></li><li>验证C项</li><li>要求有点高啊。。。。</li></ol><p><img src="/2020/05/10言语理解-考点2/82.png" title="好好思索下" style="zoom: 50%;"></p><blockquote><p>解题思路</p></blockquote><ol type="1"><li>四个选项各不相同</li><li>对比选项<ol type="1"><li>3 这些，排除 A</li><li>5 不确定，保留</li><li>4 不是，排除C</li><li>1 不确定保留</li></ol></li><li>对比 1 - 5<ol type="1"><li>1中的新内涵 与 3中的新内涵 有关联，<strong>1-3 在一块</strong>，就可以选B了</li></ol></li><li>排序有点麻烦。。。</li></ol><h2 id="快速读题">🚩快速读题</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/05/10言语理解-考点2/../../../images/photos/2020/012.jpg&quot; width=&quot;80%&quot;&gt; &lt;span class=&quot;geyan&quot;&gt; 望时而待之，孰与应时而使之。（《荀子·天论》） &lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="公考" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/"/>
    
      <category term="言语理解" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/"/>
    
      <category term="考点" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%80%83%E7%82%B9/"/>
    
    
      <category term="言语理解" scheme="https://simuty.com/tags/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>言语理解-技巧</title>
    <link href="https://simuty.com/2020/05/09%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3-%E6%8A%80%E5%B7%A71/"/>
    <id>https://simuty.com/2020/05/09言语理解-技巧1/</id>
    <published>2020-05-10T07:37:30.000Z</published>
    <updated>2020-05-17T05:36:53.424Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/05/09言语理解-技巧1/../../../images/photos/2020/011.jpg" width="80%"></p><p><span class="geyan"> 有兼听之明，而无奋矜之容；有兼覆之厚，而无伐德之色。（《荀子·正名》） </span> <a id="more"></a></p><h1 id="言语理解-技巧">言语理解-技巧</h1><blockquote><p>如果你可以把一个复杂的事物通俗的讲出来，就是真的理解了。</p></blockquote><p>鉴于言语理解题量大【30道】&amp; 正确率低【60% ↓】&amp; 没有整体与部分的概念</p><p>必须重来一遍，形成资料分析的那种思维。</p><h2 id="技巧一-分步解题">技巧一 分步解题</h2><p><strong>这个技巧是贯穿全部的重点，是一种思维方式</strong></p><p><img src="/2020/05/09言语理解-技巧1/05.png" style="zoom: 50%;"></p><h2 id="技巧二-压缩替换法">技巧二 压缩替换法</h2><blockquote><p>长句转短句</p></blockquote><ol type="1"><li>长句转换为短句</li><li>依赖于关联词</li></ol><p><img src="/2020/05/09言语理解-技巧1/07.png" style="zoom: 50%;"></p><p><img src="/2020/05/09言语理解-技巧1/06.png" style="zoom: 50%;"></p><h2 id="技巧三-成分分析法">技巧三 成分分析法</h2><blockquote><p>理解长难句</p></blockquote><p>长难句找 <strong>主谓宾</strong>，宾语通常是一个复合结构或小句。</p><blockquote><p>标志词, 每个句子都可以分开找重点</p></blockquote><ol type="1"><li>的----定语（前置）</li><li>地----状语（前置）</li><li>得----补语（后置）</li></ol><p><img src="/2020/05/09言语理解-技巧1/08.png" style="zoom: 50%;"> <img src="/2020/05/09言语理解-技巧1/09.png" title="答案：C" style="zoom: 50%;"> <img src="/2020/05/09言语理解-技巧1/10.png" title="答案：D" style="zoom: 50%;"></p><h2 id="技巧四-背景铺垫法">技巧四 背景铺垫法</h2><p>背景为了引出重点，背景不重要</p><p><img src="/2020/05/09言语理解-技巧1/11.png" title="答案：A" style="zoom: 50%;"> <img src="/2020/05/09言语理解-技巧1/12.png" title style="zoom: 50%;"> <img src="/2020/05/09言语理解-技巧1/13.png" title style="zoom: 50%;"></p><h2 id="技巧五-主体排除法">技巧五 主体排除法</h2><blockquote><p>选项的陈述主体要与原文保持一致</p></blockquote><p>什么是主体？</p><ol type="1"><li>可以是主语</li><li>文章围绕这个东西展开，类似：主题。</li></ol><p>找到主体后，就可以直接排除一些选项。</p><ol type="1"><li>找主体</li><li>排除非主体选项</li><li>对比剩余选项差异</li><li>从题干中找关键词 与 第三步 对比</li></ol><p><img src="/2020/05/09言语理解-技巧1/14.png" title="答案：D" style="zoom: 50%;"> <img src="/2020/05/09言语理解-技巧1/15.png" style="zoom: 50%;"></p><p><img src="/2020/05/09言语理解-技巧1/16.png" title="答案：B" style="zoom: 50%;"></p><p><img src="/2020/05/09言语理解-技巧1/17.png" style="zoom: 50%;"></p><p>视频中排除A B 后，直接根据 <strong>厂家</strong> 二字排除 D。。。</p><p>## 技巧六 指代引导法</p><p>文章中有出现 <strong>宏观指代</strong>【指代上文的宏观内容】，则该句重要，往往承担文段的主要观点。</p><p>🔺并非所有的代词都重要！ <strong>必须是宏观指代</strong></p><p><img src="/2020/05/09言语理解-技巧1/18.png" style="zoom: 50%;"> <img src="/2020/05/09言语理解-技巧1/19.png" style="zoom: 50%;"> <img src="/2020/05/09言语理解-技巧1/20.png" style="zoom: 50%;"></p><h2 id="技巧七-援引观点法">技巧七 援引观点法</h2><blockquote><p>引出来的是重点！</p></blockquote><ol type="1"><li>作用：为了引出之后作者的观点，重点阅读援引之后的语句</li><li>类型<ol type="1"><li>正向援引：正如 XXXX， 因此/所以</li><li>反向援引：一家之言【有人、大多数人、有看法、通常、传统。。】 <strong>然而、但是等</strong></li></ol></li></ol><table><thead><tr class="header"><th></th><th>前半句</th><th>后半句</th></tr></thead><tbody><tr class="odd"><td>正向援引</td><td>正如 XXXX</td><td>因此/所以</td></tr><tr class="even"><td>反向援引</td><td>一家之言 <br> 【有人、大多数人、有看法、通常、传统】</td><td>然而、但是等</td></tr></tbody></table><p>🔺🔺 <img src="/2020/05/09言语理解-技巧1/21.png" style="zoom: 50%;"></p><p><img src="/2020/05/09言语理解-技巧1/22.png" style="zoom: 50%;"></p><p><img src="/2020/05/09言语理解-技巧1/23.png" style="zoom: 50%;"></p><h2 id="技巧八-表达倾向性">技巧八 表达倾向性</h2><ol type="1"><li>注意把握文中的表达倾向性</li><li>类型<ol type="1"><li>积极的倾向性</li><li>消极的倾向性<ol type="1"><li>从表面上看</li><li>看上去</li><li>似乎、好像</li><li>所谓</li><li>遗憾的是</li></ol></li></ol></li></ol><blockquote><p>积极的 =》 上箭头 ⬆️ 消极的 =》 下箭头 ⬇️</p></blockquote><p><img src="/2020/05/09言语理解-技巧1/24.png" style="zoom: 50%;"></p><p><img src="/2020/05/09言语理解-技巧1/25.png" style="zoom: 50%;"></p><h2 id="技巧九-举例论证法">技巧九 举例论证法</h2><ol type="1"><li>作用<ol type="1"><li>为了证明【前后】出现的观点，例子本身不重要，可以忽略或快速浏览</li><li>围绕例子的选项不是主旨题的答案</li></ol></li><li>类型<ol type="1"><li>显性：比如、例如、XX就是一个例证、以XX为例</li><li>隐性：数据、年份、人名、地名、术语。</li></ol></li></ol><p><img src="/2020/05/09言语理解-技巧1/26.png" style="zoom: 50%;"></p><p><img src="/2020/05/09言语理解-技巧1/27.png" style="zoom: 50%;"></p><p><img src="/2020/05/09言语理解-技巧1/28.png" style="zoom: 50%;"></p><h2 id="技巧十-反面论证法">技巧十 反面论证法</h2><ol type="1"><li>作用<ol type="1"><li>为了说明证明观点的权威性与合理性</li></ol></li><li>类型<ol type="1"><li>正 + 反： 不要看反面论证，直接看前面<ol type="1"><li>你今天要带伞，不带伞会淋雨【后半句不需要看】</li></ol></li><li>(正) + 反：通过反面论证退出正面观点<ol type="1"><li>如果不。。那么不。。</li><li>如果没有。。那么没有</li><li>例子<ol type="1"><li>如果不带伞就淋雨 ---&gt; 需要带伞</li></ol></li></ol></li></ol></li></ol><p><img src="/2020/05/09言语理解-技巧1/29.png" style="zoom: 50%;"></p><p><img src="/2020/05/09言语理解-技巧1/30.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/05/09言语理解-技巧1/../../../images/photos/2020/011.jpg&quot; width=&quot;80%&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;geyan&quot;&gt; 有兼听之明，而无奋矜之容；有兼覆之厚，而无伐德之色。（《荀子·正名》） &lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="公考" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/"/>
    
      <category term="技巧" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="言语理解" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/%E6%8A%80%E5%B7%A7/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/"/>
    
    
      <category term="言语理解" scheme="https://simuty.com/tags/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>数量关系-技巧</title>
    <link href="https://simuty.com/2020/05/09%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB-%E6%8A%80%E5%B7%A7/"/>
    <id>https://simuty.com/2020/05/09数量关系-技巧/</id>
    <published>2020-05-09T09:37:30.000Z</published>
    <updated>2020-05-17T05:37:12.284Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/05/09数量关系-技巧/../../../images/photos/2020/010.jpg" width="80%"></p><p><span class="geyan"> 凡事行，有益于理者立之，无益于理者废之。（《荀子·儒效》） </span> <a id="more"></a></p><h1 id="数量关系-技巧">数量关系-技巧</h1><h2 id="第一节-解题思维">第一节 解题思维</h2><h3 id="代入排除法">代入排除法</h3><p>适用代入排除法的典型题型</p><ol type="1"><li>多位数： 几个数组成的</li><li>年龄： 选择各个年龄值</li><li>不定方程：</li><li>余数：有总数、有剩余、分东西问题</li></ol><h3 id="方程与不定方程">方程与不定方程</h3><h2 id="第二节">第二节</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/05/09数量关系-技巧/../../../images/photos/2020/010.jpg&quot; width=&quot;80%&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;geyan&quot;&gt; 凡事行，有益于理者立之，无益于理者废之。（《荀子·儒效》） &lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="公考" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/"/>
    
      <category term="数量关系" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB/"/>
    
      <category term="技巧" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="数量关系" scheme="https://simuty.com/tags/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>资料分析-考点</title>
    <link href="https://simuty.com/2020/05/08%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90-%E8%80%83%E7%82%B9/"/>
    <id>https://simuty.com/2020/05/08资料分析-考点/</id>
    <published>2020-05-07T09:31:05.000Z</published>
    <updated>2020-05-17T05:37:20.295Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/05/08资料分析-考点/../../../images/photos/2020/009.jpg" width="80%"></p><p><span class="geyan"> 言而当，知也；默而当，亦知也。（《荀子·非十二子》） </span> <a id="more"></a></p><p>[toc]</p><h1 id="常考点">常考点</h1><h2 id="第一节-增长率常考题型">第一节 增长率常考题型</h2><p>考点识别</p><ol type="1"><li>增长/减少 + %</li></ol><p>常考题型</p><ol type="1"><li>增长率计算</li><li>增长率判断</li><li>增长率大小比较</li><li>特殊增长率</li></ol><p><img src="/2020/05/08资料分析-考点/04.png"></p><p><img src="/2020/05/08资料分析-考点/05.png"></p><h3 id="增长率">增长率</h3><p>如果确定是求增长率，</p><ol type="1"><li>快速找到【基期、现期、增长量】</li><li>列公式</li><li>看选项是否需要注意量级，</li><li>选择直除、截位计算</li></ol><p><strong>遇到百分点，加减操作</strong> 低-》加 高-》减</p><p><img src="/2020/05/08资料分析-考点/06.png"></p><p><strong>解题步骤</strong></p><p><img src="/2020/05/08资料分析-考点/07.png"></p><p><img src="/2020/05/08资料分析-考点/08.png"></p><p>判断量级，画线可以根据选项来划两位、三位</p><p><img src="/2020/05/08资料分析-考点/09.png"></p><h3 id="增长率判断">增长率判断</h3><p>增长率判断、比较，题型：柱状图、条形图</p><ol type="1"><li>时间段内是否达到、超过某个数据</li></ol><p><strong>不需要全部计算完。</strong></p><p>解法</p><ol type="1"><li>确定问题</li><li>基量*比值 + 基量 对比 现量</li></ol><h3 id="增长率大小比较">增长率大小比较</h3><p><strong>变幅 = 变化幅度 = 增长率的绝对值</strong></p><h2 id="第二节-基期量常考题型">第二节 基期量常考题型</h2><p>X: 现期量 r: 增长率</p><p><span class="math display">\[\frac{X}{1+r}\]</span></p><p>考点识别：</p><p><strong>已知“现在”，求“过去”</strong></p><p>常考题型</p><ol type="1"><li>计算基期量</li><li>基期量做差</li><li>基期量比较</li></ol><h3 id="计算基期量">计算基期量</h3><ol type="1"><li>如果减可以化为乘法，</li><li>消百分号</li><li>在消小数点</li><li>因为选项差别小，所以可以仔细算</li></ol><p><img src="/2020/05/08资料分析-考点/10.png"></p><h3 id="基期量做差比较">基期量做差/比较</h3><ol type="1"><li>确定题目是基期量做差</li><li>看选项<ol type="1"><li>两组数：先算现期差</li><li>四个数：分别直除计算</li></ol></li></ol><p><img src="/2020/05/08资料分析-考点/11.png"></p><p>1-增长率化为乘：最好是增长率很小</p><p><img src="/2020/05/08资料分析-考点/12.png"></p><p><img src="/2020/05/08资料分析-考点/13.png"></p><p><img src="/2020/05/08资料分析-考点/14.png"></p><p>注意事项</p><ol type="1"><li>化除为乘，前提：减法 &amp; 增长率很小</li><li>增长倍数可以直接用</li><li>利用分数性质</li></ol><h2 id="第三节-增长量常考题">第三节 增长量常考题</h2><h3 id="公式">🚩公式</h3><p>已知 <strong>现期</strong>&amp;<strong>增长率</strong>， 求增长量。</p><p>X： 现期 r： 增长率 Z: 增长量 n: 增长率转换为 1 / n</p><p><span class="math display">\[Z = \frac{X}{r+1} * r\]</span></p><p>增长率为正数</p><p><span class="math display">\[Z = \frac{X}{n+1}\]</span></p><p>增长率为负数</p><p><span class="math display">\[Z = \frac{X}{n-1}\]</span></p><h3 id="小率">小率</h3><p><code>小于 5%</code></p><h4 id="转换分数--100-除">转换分数--100 除</h4><ol type="1"><li>1% 2% 3%</li><li>可以直接 100 / 2 = 1 / 50</li></ol><p><img src="/2020/05/08资料分析-考点/15.png"></p><h4 id="转换分数--乘-100">转换分数--乘 100</h4><p>将 2.5% 转化为分数：</p><ol type="1"><li>2.5% * 10 = 25% = 1 / 4</li><li>加 0，得 1 / 40</li></ol><p>4.X 5.X 可以乘 2。</p><p>掌握不熟练，可以用上一种方式</p><h3 id="大率">大率</h3><p><code>超过 50%</code></p><h4 id="直除求基期">直除求基期</h4><h3 id="特殊情况">特殊情况</h3><h4 id="分数取中间">分数取中间</h4><ol type="1"><li>某个增长率化接近两个两个分数<ol type="1"><li>选项差别大，取哪个分数都行，如 图 15</li><li>选项值接近，取两个分数中间的，如 图 16</li></ol></li></ol><figure><img src="/2020/05/08资料分析-考点/15.png" alt><figcaption>图 15</figcaption></figure><figure><img src="/2020/05/08资料分析-考点/16.png" alt><figcaption>图 16</figcaption></figure><h4 id="增长量倍数">增长量倍数</h4><blockquote><p>可以分别求增长量，也不慢</p></blockquote><figure><img src="/2020/05/08资料分析-考点/17.png" alt><figcaption>图 17</figcaption></figure><h3 id="增长量大小比较">🚩增长量大小比较</h3><p>识别：大小比较、排序</p><blockquote><p>口诀：大大则大，一大一小看倍数</p></blockquote><figure><img src="/2020/05/08资料分析-考点/18.png" alt><figcaption>图 18</figcaption></figure><blockquote><p>特殊情况：</p></blockquote><ol type="1"><li>【增长率如果大于<code>50%</code>】<ol type="1"><li>大大则大</li><li>【一大一小就不要用口诀！】</li></ol></li><li>不能用口诀，就用直除，图：19</li><li>倍数相近也不可以用口诀。</li></ol><figure><img src="/2020/05/08资料分析-考点/19.png" alt><figcaption>图 19 直除技巧</figcaption></figure><h4 id="绝对值问题">绝对值问题</h4><figure><img src="/2020/05/08资料分析-考点/20.png" alt><figcaption>图 20</figcaption></figure><blockquote><p>增率 10% 以内【负数】，大于 10%，就直除</p></blockquote><figure><img src="/2020/05/08资料分析-考点/21.png" alt><figcaption>图 21</figcaption></figure><h2 id="第四节-比重常考题型">第四节 比重常考题型</h2><blockquote><p>识别：</p></blockquote><ol type="1"><li>A【部分】 <code>占</code> B【整体】 的比重</li><li>A【部分】所<code>占</code>比重</li><li>已知 整体 &amp; 比重，求部分 = 整体 * 比重</li><li>已知 部分 &amp; 比重，求整体 = 部分 / 比重</li></ol><h3 id="基本计算">基本计算</h3><figure><img src="/2020/05/08资料分析-考点/26.png" alt><figcaption>26</figcaption></figure><figure><img src="/2020/05/08资料分析-考点/27.png" alt><figcaption>概念--利润率</figcaption></figure><figure><img src="/2020/05/08资料分析-考点/28.png" alt><figcaption>概念看错</figcaption></figure><figure><img src="/2020/05/08资料分析-考点/29.png" alt><figcaption>看题目 找问题</figcaption></figure><h3 id="图--扇形">图--扇形</h3><ol type="1"><li>计算某一个部分的比重，比重 * 360˚， 扇形的圆心角度</li><li>大小关系，倍数关系</li></ol><blockquote><p>12 点顺时针看图</p></blockquote><h3 id="基期比重">🔺基期比重</h3><blockquote><p>识别：</p></blockquote><p>已知 【现在】求【过去】的比重</p><p><img src="/2020/05/08资料分析-考点/31.png" alt="识别"> <img src="/2020/05/08资料分析-考点/32.png" alt="识别"></p><blockquote><p>公式 一般只需要判断前者，后者只需要判断大于、小于 1</p></blockquote><p><img src="/2020/05/08资料分析-考点/30.png"></p><p><strong>如果不能直接判断后者，就截位直除</strong></p><h4 id="一般计算-进阶">一般计算 &amp;&amp; 进阶</h4><ul><li>一般计算</li></ul><figure><img src="/2020/05/08资料分析-考点/33.png" alt><figcaption>实例</figcaption></figure><ul><li>进阶</li></ul><p>选项特别接近 || （百分数接近&amp;很小），是<code>因为</code>后者在1附近</p><p><img src="/2020/05/08资料分析-考点/35.png" alt="实例"> <img src="/2020/05/08资料分析-考点/34.png" alt="实例--解释"> <img src="/2020/05/08资料分析-考点/36.png" alt="实例--技巧"></p><h4 id="基期变化">🔺🔺基期变化</h4><blockquote><p>现期比重 与 基期比重 做差</p></blockquote><p>识别</p><ol type="1"><li>比重的元素 + 上升、下降</li><li>比重的元素 + 上升、下降 + 百分点</li></ol><p>口诀</p><p><strong>a% &gt; b% =&gt; A/B 上升</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a%: 部分增长率</span><br><span class="line">b%: 整体增长率</span><br></pre></td></tr></table></figure><blockquote><p>部分增长率 &gt; 整体增长率，则比重上升，反之，下降。</p></blockquote><figure><img src="/2020/05/08资料分析-考点/37.png" alt><figcaption>实例--技巧</figcaption></figure><figure><img src="/2020/05/08资料分析-考点/38.png" alt><figcaption>实例--原理</figcaption></figure><figure><img src="/2020/05/08资料分析-考点/39.png" alt><figcaption>实例--读数</figcaption></figure><p>步骤</p><ol type="1"><li>判断 比重变化的方向，a% 大小对比 b%</li><li>选择<ol type="1"><li>时间不够，选【小】的</li><li>百分点 远远 小于 |a% - b%|</li></ol></li></ol><p><img src="/2020/05/08资料分析-考点/40.png"></p><figure><img src="/2020/05/08资料分析-考点/41.png" alt><figcaption>精确计算--没啥用</figcaption></figure><h2 id="第五节-平均数与倍数">第五节 平均数与倍数</h2><h3 id="平均数">平均数</h3><p>识别</p><p>平均数：</p><ol type="1"><li>平均</li><li>均</li><li>每</li><li>单位, 单位面积产量=》面积/单位</li></ol><blockquote><p>后 / 前</p></blockquote><p>每万元GDP的能耗 =》 能耗 / GDP 每单位取水量的耗水 =》 耗水 / 取水量</p><p><img src="/2020/05/08资料分析-考点/43.png"></p><h3 id="倍数">倍数</h3><blockquote><p>倍数： A是（为）B的多少倍 A / B</p></blockquote><p><img src="/2020/05/08资料分析-考点/44.png"></p><p>公式扩展</p><p><img src="/2020/05/08资料分析-考点/45.png"></p><figure><img src="/2020/05/08资料分析-考点/46.png" alt><figcaption>选择B</figcaption></figure><h2 id="蒙题技巧">🔴蒙题技巧 💯</h2><h3 id="出现多的">出现多的</h3><p><img src="/2020/05/08资料分析-考点/25.png"></p><h3 id="选小的">选小的</h3><p>比重变化 <img src="/2020/05/08资料分析-考点/42.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/05/08资料分析-考点/../../../images/photos/2020/009.jpg&quot; width=&quot;80%&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;geyan&quot;&gt; 言而当，知也；默而当，亦知也。（《荀子·非十二子》） &lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="公考" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/"/>
    
      <category term="资料分析" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/"/>
    
      <category term="考点" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%80%83%E7%82%B9/"/>
    
    
      <category term="资料分析" scheme="https://simuty.com/tags/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>资料分析-技巧</title>
    <link href="https://simuty.com/2020/05/07%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90-%E6%8A%80%E5%B7%A7/"/>
    <id>https://simuty.com/2020/05/07资料分析-技巧/</id>
    <published>2020-05-07T09:19:31.000Z</published>
    <updated>2020-05-17T05:37:31.743Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/05/07资料分析-技巧/../../../images/photos/2020/008.jpg" width="80%"></p><p><span class="geyan"> 知之而不行，虽敦必困。（《荀子·儒效》） </span> <a id="more"></a></p><h1 id="速算技巧">速算技巧</h1><h2 id="第一节-速算技巧--直除法">第一节 速算技巧--直除法</h2><h3 id="解题步骤">解题步骤</h3><p>画出三要素 1. 时间 ⭕️ 2. 主体 直线 3. 关键字 三角</p><hr><p>增长量 =（ 现 / 1 + 率 ）* 率</p><hr><h3 id="材料阅读与数据查找">材料阅读与数据查找</h3><ol type="1"><li>文字材料<ol type="1"><li>时间、每段首句</li></ol></li><li>表格<ol type="1"><li>标题、横/纵标目、单元</li></ol></li><li>折线图图形<ol type="1"><li>标题、横/纵轴、图例、单位</li></ol></li><li>饼状图<ol type="1"><li>标题、单位、类别【12 点顺时针方向】</li></ol></li></ol><h3 id="常用速算技巧">常用速算技巧</h3><h4 id="直除法">直除法</h4><p>考虑的步骤</p><ol type="1"><li>看选项<ol type="1"><li>首位不同，算第一位</li><li>第二位不一样，算到第二位</li></ol></li><li>截位【需要几位算几位】<ol type="1"><li>根据第一步，决定四舍五入，取前两位/三位</li><li>截【默认截三位】<ol type="1"><li>两位：首位不同</li><li>三位：首位相同，第二位不同</li></ol></li><li>除的时候忽略小数点<ol type="1"><li>选项差 10 倍 100 关系</li></ol></li></ol></li></ol><p>4407 / 1 + 17.7%</p><ul><li>4280</li><li>3744</li><li>2983</li><li>5347</li></ul><p>截两位 <span class="math display">\[ \frac{4407}{12} \]</span></p><p>题：7.84 / 1 + 7.4%</p><p>784 / 107 = 7.3</p><p>1882.5 / 4219.1</p><p>1880 / 422 得到 45 排除 40 如果差别大，就 45</p><p><strong>特殊情况：截位&amp;小数</strong></p><p><img src="/2020/05/07资料分析-技巧/04.png"></p><p><strong>保留所有单位，取相同位数划线</strong></p><p><img src="/2020/05/07资料分析-技巧/05.png"></p><p><strong>左溢一位</strong></p><p><img src="/2020/05/07资料分析-技巧/06.png"></p><p><strong>比值问题</strong></p><p><img src="/2020/05/07资料分析-技巧/07.png"></p><h2 id="第二节-速算技巧--特殊分数化简">第二节 速算技巧--特殊分数化简</h2><p>http://latex.codecogs.com/eqneditor/editor.php</p><h3 id="特殊分数">特殊分数</h3><h4 id="背熟">背熟</h4><blockquote><p>考试可以先默写到草稿纸</p></blockquote><p>前提：背熟 分数转百分数：</p><p><span class="math display">\[\frac{1}{2} - \frac{1}{15}\]</span></p><p><strong>Plan B</strong> 当场计算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span>% = <span class="number">100</span> / <span class="number">14</span> = <span class="number">1</span>/<span class="number">7</span></span><br></pre></td></tr></table></figure><p><img src="/2020/05/07资料分析-技巧/08.png"></p><h4 id="用途一-增长量">用途一 增长量</h4><ol type="1"><li>现 &amp; 率</li></ol><p>X: 现期量 r：增率 Z：增量</p><p><span class="math display">\[Z = \frac{X}{r+1}\]</span></p><p><img src="/2020/05/07资料分析-技巧/09.png"></p><h4 id="用途二-a-b">用途二 A * B</h4><h5 id="比重-部分-整体-比重">比重 【部分 = 整体 * 比重】</h5><h5 id="现期-现-基-率">现期 【现 = 基 * 率】</h5><p><img src="/2020/05/07资料分析-技巧/10.png"></p><h3 id="分数比较">分数比较</h3><h4 id="直除法-1">直除法</h4><p>量级一致，直除计算<strong>首位</strong></p><p><strong>量级一致</strong></p><p><img src="/2020/05/07资料分析-技巧/11.png"></p><p><strong>量级不一致</strong></p><p><img src="/2020/05/07资料分析-技巧/12.png"></p><h4 id="利用分数性质">利用分数性质</h4><p>上边的问题，可以用量级计算，但是特别麻烦。采用分数性质做。</p><h5 id="大小不同">1. 大小不同</h5><p><img src="/2020/05/07资料分析-技巧/13.png"></p><p><img src="/2020/05/07资料分析-技巧/14.png"></p><h5 id="找接近">2. 找接近</h5><p><img src="/2020/05/07资料分析-技巧/15.png"></p><p><strong>分子分母都一倍多点，就直除</strong></p><p><img src="/2020/05/07资料分析-技巧/16.png"></p><h5 id="示例">3. 示例</h5><p><img src="/2020/05/07资料分析-技巧/17.png"></p><h3 id="特殊公式口诀">特殊公式口诀</h3><h4 id="化除为乘">化除为乘</h4><p>⚠️ ： <strong>5%</strong></p><p><img src="/2020/05/07资料分析-技巧/18.png"></p><p><img src="/2020/05/07资料分析-技巧/19.png"></p><h4 id="笑脸公式隔年增长率">🚩笑脸公式【隔年增长率】</h4><p>三个时间 + 两个增长率， 求隔年增长率</p><p><img src="/2020/05/07资料分析-技巧/20.png"></p><p><img src="/2020/05/07资料分析-技巧/21.png"></p><p>🚩⚠️事项</p><ol type="1"><li>乘积部分省略：【 |X%| |Y%| 均小于 10%】</li><li>增长率正负均可以使用</li><li>时间间隔--&gt;隔月也行，三个时间点两个增长率</li></ol><blockquote><p>正负问题，遇到补充</p></blockquote><p><img src="/2020/05/07资料分析-技巧/22.png"></p><p><img src="/2020/05/07资料分析-技巧/23.png"></p><h4 id="合成增长率两部分合成整体">🚩合成增长率【两部分合成整体】</h4><p><strong>整体增长率一定在于两者之间。且偏向于基数【现期量】较大的一方</strong></p><p>如果问 1-3 月的增长率，估算，两者之间。</p><p><img src="/2020/05/07资料分析-技巧/24.png"></p><p>## 第三节 🔴技巧--蒙题</p><figure><img src="/2020/05/07资料分析-技巧/25.png" alt><figcaption>蒙题技巧</figcaption></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/05/07资料分析-技巧/../../../images/photos/2020/008.jpg&quot; width=&quot;80%&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;geyan&quot;&gt; 知之而不行，虽敦必困。（《荀子·儒效》） &lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="公考" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/"/>
    
      <category term="资料分析" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/"/>
    
      <category term="技巧" scheme="https://simuty.com/categories/%E5%85%AC%E8%80%83/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="资料分析" scheme="https://simuty.com/tags/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>React实战系列-布局与组件【1】</title>
    <link href="https://simuty.com/2020/04/20React%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97-%E5%B8%83%E5%B1%80%E4%B8%8E%E7%BB%84%E4%BB%B6/"/>
    <id>https://simuty.com/2020/04/20React实战系列-布局与组件/</id>
    <published>2020-04-23T10:13:32.000Z</published>
    <updated>2020-05-15T18:54:01.576Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/04/20React实战系列-布局与组件/../../../images/photos/2020/007.jpg" width="60%"></p><p>民之从事，常于几成而败之。慎终如始，则无败事。--- 《道德经》第64章</p><a id="more"></a><blockquote><p>原本打算做的网易音乐后台要搁浅了 首先我觉得这个并不适合我</p></blockquote><p>原因有以下几个方面：</p><ol type="1"><li>跳跃过大</li><li>自定义模块过多</li></ol><p>虽说跟着一遍做一遍摸索，可以完成，但我觉得太浪费时间，终究没有个流程。</p><blockquote><p>我的目标是：</p></blockquote><ol type="1"><li>掌握数据流管理方案--redux及其配套设施；</li><li>熟悉react、react-router-dom、react-router的应用场景以及注意事项；</li><li>熟练使用antd的组件；</li><li>----完成前端应用-----</li><li>Eggjs + Mysql 提供数据服务</li><li>进一步完善前后端</li></ol><h2 id="开篇">开篇</h2><p>以上的目标打算抽时间逐步完成，这个系列博客，尽量写明白写清楚，也算是职业生涯中的值得回忆的一个成就。 因为是一边学习一边记录，所以采取由浅入深的开发流程。</p><blockquote><p>说明</p></blockquote><p>为了完成目标，确定的目标项目是开源的----<a href="https://github.com/karakal-FET/react-admin" target="_blank" rel="noopener">react-admin</a>；打算在此基础上<strong>进行改写</strong>并完成一个相对完善的后端项目。</p><p>这篇文章说明的文字较多。</p><blockquote><p>原生化</p></blockquote><ol type="1"><li>尽可能的<strong>只用</strong>原生组件，目光始终在完成需求上；</li><li>尽可能用不同的方式完成同样的需求；</li><li>尽可能好的组织代码方式</li></ol><h3 id="技术栈">技术栈</h3><p>大致分为以下几类，还会涉及其余的相关模块等，后续会在相关位置添加链接或单独写文章整理。</p><ol type="1"><li>语言：<ol type="1"><li><a href="https://www.tslang.cn/docs/handbook/basic-types.html" target="_blank" rel="noopener">TS</a>、</li><li><a href="http://lesscss.cn/" target="_blank" rel="noopener">Less</a></li></ol></li><li>React：<ol type="1"><li><a href="https://react.docschina.org/docs/getting-started.html" target="_blank" rel="noopener">React</a></li><li><a href="https://react-guide.github.io/react-router-cn/" target="_blank" rel="noopener">react-router</a></li><li><a href="https://github.com/ReactTraining/react-router/tree/master/packages/react-router-dom" target="_blank" rel="noopener">react-router-dom</a></li></ol></li><li>状态管理：<ol type="1"><li><a href="https://www.redux.org.cn/" target="_blank" rel="noopener">Redux</a></li><li><a href="https://cn.redux.js.org/docs/react-redux/" target="_blank" rel="noopener">React-Redux</a></li><li><a href="https://redux-saga-in-chinese.js.org/" target="_blank" rel="noopener">Redux-Saga</a></li><li><a href="https://github.com/immerjs/immer" target="_blank" rel="noopener">Immer</a></li></ol></li><li>UI：<ol type="1"><li><a href="https://ant.design/docs/resources-cn" target="_blank" rel="noopener">Antd</a></li><li><a href="https://www.echartsjs.com/zh/option.html#title" target="_blank" rel="noopener">echartsjs</a></li><li><a href="https://github.com/hustcc/echarts-for-react" target="_blank" rel="noopener">echarts-for-react</a></li></ol></li></ol><h3 id="疑问解答">疑问解答</h3><p>采用官方脚手架--<a href="https://www.html.cn/create-react-app/docs/getting-started/" target="_blank" rel="noopener">create-react-app</a>；</p><blockquote><p>为何不用<a href="https://dvajs.com/guide/" target="_blank" rel="noopener">dvajs</a>?</p></blockquote><p>综合性很强，但我认为应该<strong>先难后易</strong></p><blockquote><p>为何不用<a href="https://umijs.org/zh-CN/docs/getting-started" target="_blank" rel="noopener">umi</a>?</p></blockquote><p>综合性更强，仍旧认为应该<strong>先难后易</strong></p><p>学习node，我觉得先了解express，再写koa，最后采用egg 是个不错的选择。</p><blockquote><p>建议不要eject!</p></blockquote><p>初心是学习react全家桶，不是webpack【后期有空再学】, 至于less相关配置，可以<a href="https://ant.design/docs/react/use-in-typescript-cn#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98" target="_blank" rel="noopener">换个做法</a></p><h2 id="开动">开动</h2><p>由于打算写这个系列的文章的时候，基本的UI框架已经搭建好，现在就把文件目录罗列出来，并加以说明，针对这个过程中遇到的问题，会在之后一一罗列，代码中几乎都会有注释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README\ 2.md    <span class="comment"># 说明文件</span></span><br><span class="line">├── README.md       <span class="comment"># 说明文件</span></span><br><span class="line">├── config-overrides.js     <span class="comment"># less 相关配置</span></span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── public      <span class="comment"># 资源文件</span></span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── logo192.png</span><br><span class="line">│   ├── logo512.png</span><br><span class="line">│   ├── manifest.json</span><br><span class="line">│   └── robots.txt</span><br><span class="line">├── src         <span class="comment"># 代码区</span></span><br><span class="line">│   ├── App.less        <span class="comment"># 布局文件</span></span><br><span class="line">│   ├── App.test.tsx    <span class="comment"># 测试文件</span></span><br><span class="line">│   ├── App.tsx         <span class="comment"># 入口布局</span></span><br><span class="line">│   ├── Page.tsx        <span class="comment"># 入口文件</span></span><br><span class="line">│   ├── components          <span class="comment">#组件</span></span><br><span class="line">│   │   ├── HeaderCustom.tsx    <span class="comment"># 头部组件</span></span><br><span class="line">│   │   ├── SiderCustom.tsx     <span class="comment"># 侧边栏</span></span><br><span class="line">│   │   ├── SiderMenu.tsx       <span class="comment"># 侧边栏菜单</span></span><br><span class="line">│   │   ├── forms                   <span class="comment"># 文件夹--表单</span></span><br><span class="line">│   │   ├── index.tsx           <span class="comment"># 组件统一导出文件</span></span><br><span class="line">│   │   ├── pages               <span class="comment"># 单页面，如404</span></span><br><span class="line">│   │   └── widget              <span class="comment"># 小组件，如copyright</span></span><br><span class="line">│   ├── containers  <span class="comment"># 容器组件</span></span><br><span class="line">│   │   └── XXX     <span class="comment"># 后期会增加</span></span><br><span class="line">│   ├── images  <span class="comment"># 图片</span></span><br><span class="line">│   ├── index.css</span><br><span class="line">│   ├── index.tsx <span class="comment"># 入口配置文件</span></span><br><span class="line">│   ├── react-app-env.d.ts <span class="comment"># .d.ts文件</span></span><br><span class="line">│   ├── redux   <span class="comment"># redux 相关</span></span><br><span class="line">│   │   ├── configureStore.ts <span class="comment"># 统一配置redux</span></span><br><span class="line">│   │   └── modules <span class="comment"># redux modules 文件夹</span></span><br><span class="line">│   ├── routes  <span class="comment"># 路由配置文件夹</span></span><br><span class="line">│   │   ├── config.ts   <span class="comment"># 路由的配置文件</span></span><br><span class="line">│   │   └── index.tsx   <span class="comment"># 遍历配置文件，并初始化路由</span></span><br><span class="line">│   ├── serviceWorker.ts</span><br><span class="line">│   ├── setupTests.ts</span><br><span class="line">│   ├── style   <span class="comment"># 样式文件夹</span></span><br><span class="line">│   │   ├── antd</span><br><span class="line">│   │   ├── imgs</span><br><span class="line">│   │   └── index.less</span><br><span class="line">│   ├── test.js</span><br><span class="line">│   └── utils   <span class="comment"># 小功能</span></span><br><span class="line">│       ├── antdValidate.ts</span><br><span class="line">│       └── index.ts</span><br><span class="line">└── tsconfig.json</span><br></pre></td></tr></table></figure><p>采用 <a href="https://www.html.cn/create-react-app/docs/adding-typescript/" target="_blank" rel="noopener">Create React App TS</a>.</p><h3 id="步骤一-初始化">步骤一 初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --- 初始化</span></span><br><span class="line">$ npx create-react-app react-project --typescript</span><br><span class="line">$ <span class="comment"># 或者</span></span><br><span class="line">$ yarn create react-app react-project --typescript</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- TS相关依赖</span></span><br><span class="line">$ npm install --save typescript @types/node @types/react @types/react-dom @types/jest</span><br><span class="line">$ <span class="comment"># 或者</span></span><br><span class="line">$ yarn add typescript @types/node @types/react @types/react-dom @types/jest</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 启动</span></span><br><span class="line">$ <span class="built_in">cd</span> react-project</span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p>以上构建好&amp;启动了项目。</p><h3 id="步骤二-下载相关依赖">步骤二 下载相关依赖</h3><p>其实应该用到啥配置啥，这样更能明白，但是现在只能罗列下，建文件夹、下载、、、都太简单了. &gt; 换个思路，把目前需要的包罗列出来，然后逐步完善代码。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认生成的文件</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"react-project"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@ant-design/icons"</span>: <span class="string">"^4.0.6"</span>,</span><br><span class="line">    <span class="attr">"@testing-library/jest-dom"</span>: <span class="string">"^4.2.4"</span>,</span><br><span class="line">    <span class="attr">"@testing-library/react"</span>: <span class="string">"^9.5.0"</span>,</span><br><span class="line">    <span class="attr">"@testing-library/user-event"</span>: <span class="string">"^7.2.1"</span>,</span><br><span class="line">    <span class="attr">"@types/jest"</span>: <span class="string">"^24.9.1"</span>,</span><br><span class="line">    <span class="attr">"@types/node"</span>: <span class="string">"^12.12.36"</span>,</span><br><span class="line">    <span class="attr">"@types/react"</span>: <span class="string">"^16.9.34"</span>,</span><br><span class="line">    <span class="attr">"@types/react-dom"</span>: <span class="string">"^16.9.6"</span>,</span><br><span class="line">    <span class="attr">"antd"</span>: <span class="string">"^4.1.4"</span>,</span><br><span class="line">    <span class="attr">"react"</span>: <span class="string">"^16.13.1"</span>,</span><br><span class="line">    <span class="attr">"react-dom"</span>: <span class="string">"^16.13.1"</span>,</span><br><span class="line">    <span class="attr">"react-redux"</span>: <span class="string">"^7.2.0"</span>,</span><br><span class="line">    <span class="attr">"react-router-config"</span>: <span class="string">"^5.1.1"</span>,</span><br><span class="line">    <span class="attr">"react-router-dom"</span>: <span class="string">"^5.1.2"</span>,</span><br><span class="line">    <span class="attr">"react-scripts"</span>: <span class="string">"3.4.1"</span>,</span><br><span class="line">    <span class="attr">"redux"</span>: <span class="string">"^4.0.5"</span>,</span><br><span class="line">    <span class="attr">"redux-thunk"</span>: <span class="string">"^2.3.0"</span>,</span><br><span class="line">    <span class="attr">"typescript"</span>: <span class="string">"^3.7.5"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;  <span class="comment">// 下边会更改这个部分</span></span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"react-scripts start"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"react-scripts build"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"react-scripts test"</span>,</span><br><span class="line">    <span class="attr">"eject"</span>: <span class="string">"react-scripts eject"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"eslintConfig"</span>: &#123;</span><br><span class="line">    <span class="attr">"extends"</span>: <span class="string">"react-app"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"browserslist"</span>: &#123;</span><br><span class="line">    <span class="attr">"production"</span>: [</span><br><span class="line">      <span class="string">"&gt;0.2%"</span>,</span><br><span class="line">      <span class="string">"not dead"</span>,</span><br><span class="line">      <span class="string">"not op_mini all"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"development"</span>: [</span><br><span class="line">      <span class="string">"last 1 chrome version"</span>,</span><br><span class="line">      <span class="string">"last 1 firefox version"</span>,</span><br><span class="line">      <span class="string">"last 1 safari version"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>目前为止，配置文件内容</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"react-project-ts"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@ant-design/icons"</span>: <span class="string">"^4.0.6"</span>,</span><br><span class="line">    <span class="attr">"@testing-library/jest-dom"</span>: <span class="string">"^4.2.4"</span>,</span><br><span class="line">    <span class="attr">"@testing-library/react"</span>: <span class="string">"^9.5.0"</span>,</span><br><span class="line">    <span class="attr">"@testing-library/user-event"</span>: <span class="string">"^7.2.1"</span>,</span><br><span class="line">    <span class="attr">"@types/echarts"</span>: <span class="string">"^4.4.6"</span>,</span><br><span class="line">    <span class="attr">"@types/jest"</span>: <span class="string">"^24.9.1"</span>,</span><br><span class="line">    <span class="attr">"@types/node"</span>: <span class="string">"^12.12.36"</span>,</span><br><span class="line">    <span class="attr">"@types/react"</span>: <span class="string">"^16.9.34"</span>,</span><br><span class="line">    <span class="attr">"@types/react-dom"</span>: <span class="string">"^16.9.6"</span>,</span><br><span class="line">    <span class="attr">"@types/react-redux"</span>: <span class="string">"^7.1.7"</span>,</span><br><span class="line">    <span class="attr">"@types/react-router-config"</span>: <span class="string">"^5.0.1"</span>,</span><br><span class="line">    <span class="attr">"@types/react-router-dom"</span>: <span class="string">"^5.1.4"</span>,</span><br><span class="line">    <span class="attr">"@types/redux-thunk"</span>: <span class="string">"^2.1.0"</span>,        <span class="comment">// 以上都是针对ts的</span></span><br><span class="line">    <span class="attr">"antd"</span>: <span class="string">"^4.1.4"</span>,       <span class="comment">// antd</span></span><br><span class="line">    <span class="attr">"babel-plugin-import"</span>: <span class="string">"^1.13.0"</span>,   <span class="comment">// 按需加载组件代码和样式的 babel 插件， 对应的是 config-overrides.js</span></span><br><span class="line">    <span class="attr">"customize-cra"</span>: <span class="string">"^0.9.1"</span>,   <span class="comment">// 加载 less 样式； 配置config-overrides.js</span></span><br><span class="line">    <span class="attr">"echarts"</span>: <span class="string">"^4.7.0"</span>,  <span class="comment">// 百度图表</span></span><br><span class="line">    <span class="attr">"echarts-for-react"</span>: <span class="string">"^2.0.15-beta.1"</span>, <span class="comment">// 百度图表 react版本</span></span><br><span class="line">    <span class="attr">"less"</span>: <span class="string">"^3.11.1"</span>,      <span class="comment">// less</span></span><br><span class="line">    <span class="attr">"less-loader"</span>: <span class="string">"^5.0.0"</span>,    <span class="comment">// less 加载</span></span><br><span class="line">    <span class="attr">"react"</span>: <span class="string">"^16.13.1"</span>,</span><br><span class="line">    <span class="attr">"react-app-rewired"</span>: <span class="string">"^2.1.5"</span>, <span class="comment">// 对 create-react-app 的默认配置进行自定义，更改的是 package.json 中的scripts：start、build、test</span></span><br><span class="line">    <span class="attr">"react-dom"</span>: <span class="string">"^16.13.1"</span>,</span><br><span class="line">    <span class="attr">"react-redux"</span>: <span class="string">"^7.2.0"</span>,    <span class="comment">// react &lt;-&gt; redux</span></span><br><span class="line">    <span class="attr">"react-router-config"</span>: <span class="string">"^5.1.1"</span>,    <span class="comment">// 路由配置</span></span><br><span class="line">    <span class="attr">"react-router-dom"</span>: <span class="string">"^5.1.2"</span>,</span><br><span class="line">    <span class="attr">"react-scripts"</span>: <span class="string">"3.4.1"</span>,</span><br><span class="line">    <span class="attr">"redux"</span>: <span class="string">"^4.0.5"</span>,</span><br><span class="line">    <span class="attr">"redux-logger"</span>: <span class="string">"^3.0.6"</span>, <span class="comment">// 日志</span></span><br><span class="line">    <span class="attr">"redux-thunk"</span>: <span class="string">"^2.3.0"</span>,    <span class="comment">// 异步</span></span><br><span class="line">    <span class="attr">"typescript"</span>: <span class="string">"^3.7.5"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"react-app-rewired start"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"react-app-rewired build"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"react-app-rewired test"</span>,</span><br><span class="line">    <span class="attr">"eject"</span>: <span class="string">"react-scripts eject"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"eslintConfig"</span>: &#123;</span><br><span class="line">    <span class="attr">"extends"</span>: <span class="string">"react-app"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"browserslist"</span>: &#123;</span><br><span class="line">    <span class="attr">"production"</span>: [</span><br><span class="line">      <span class="string">"&gt;0.2%"</span>,</span><br><span class="line">      <span class="string">"not dead"</span>,</span><br><span class="line">      <span class="string">"not op_mini all"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"development"</span>: [</span><br><span class="line">      <span class="string">"last 1 chrome version"</span>,</span><br><span class="line">      <span class="string">"last 1 firefox version"</span>,</span><br><span class="line">      <span class="string">"last 1 safari version"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结，这部分主要添加一些所需模块，没啥东西。</p><h4 id="注意事项">⚠️注意事项</h4><blockquote><p>疑问1🤔️： 如何按需加载antd组件？</p></blockquote><ol type="1"><li>babel-plugin-import：<ol type="1"><li>目标：按需引用antd</li><li>如何做：<a href="https://ant.design/docs/react/use-in-typescript-cn#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98" target="_blank" rel="noopener">antd说明--搜：babel-plugin-import</a></li></ol></li></ol><blockquote><p>疑问2🤔️：如何加载less文件？？</p></blockquote><ol type="1"><li>react-app-rewired<ol type="1"><li>目标：自定义启动服务</li><li>如何做：<a href="https://ant.design/docs/react/use-in-typescript-cn#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98" target="_blank" rel="noopener">antd说明--搜react-app-rewired</a></li></ol></li></ol><p>针对这两个问题，由于只是配置，仔细看下<a href="https://ant.design/docs/react/use-in-typescript-cn#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98" target="_blank" rel="noopener">antd说明</a><strong>完全可以搞定。</strong></p><p>本来写了个demo，感觉太简单了，没必要。。。</p><h3 id="步骤三-自定义布局">步骤三 自定义布局</h3><blockquote><p>这个部分主要采用antd的布局方式</p></blockquote><p>常规布局，<strong>sider、header、 content、footer</strong></p><p>侧边栏布局效果如下</p><figure><img src="/2020/04/20React实战系列-布局与组件/03.png" alt><figcaption>整体布局与首页</figcaption></figure><h3 id="步骤四-表单页面">步骤四 表单页面</h3><figure><img src="/2020/04/20React实战系列-布局与组件/04.png" alt><figcaption>表单页面</figcaption></figure><p>之后单文件的注意事项会在代码首部写明，便于之后复习。 因为表单页面场景比较多，结合注册登录页面将常规使用、触发，模拟触发交互数据的动作，过程中主要遇到的问题</p><h4 id="注意事项-1">⚠️注意事项</h4><ol type="1"><li>函数组件路由如何跳转?<ol type="1"><li>路由跳转的几种方式：<ol type="1"><li>路由组件<ol type="1"><li>this.props.history.push()</li></ol></li><li>非路由组件 ✍️<ol type="1"><li>useHistory: react-router-dom中的hook--useHistory(): 可以获取到history</li><li>withRouter: 添加withRouter，参数中包含props</li></ol></li></ol></li></ol></li><li>函数组件中form如何在antion中获取到/验证 form value?<ol type="1"><li>✍️ 利用Form.useForm()，可以获取到form, 进一步获取到form.validateFields()、form.getFieldValue('phone')</li><li>验证方法<ol type="1"><li>点击实例代码看控制台</li><li>看代码中的注释</li></ol></li></ol></li></ol><h2 id="代码链接">代码链接</h2><p>这篇文章跨度有点大，但是并不涉及数据流相关操作，故不懂的就看代码吧，里边有注释，其中还有些布局问题，先解决大问题，具体细节之后再修仔补。</p><blockquote><p>之后的章节都会以不同的分支作为与文章对应的代码。</p></blockquote><h3 id="代码">代码</h3><p>仓库： git@github.com:simuty/react-project.git 分支： origin/chapter1/step2</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/04/20React实战系列-布局与组件/../../../images/photos/2020/007.jpg&quot; width=&quot;60%&quot;&gt;&lt;/p&gt;
&lt;p&gt;民之从事，常于几成而败之。慎终如始，则无败事。--- 《道德经》第64章&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="https://simuty.com/categories/React/"/>
    
    
      <category term="React" scheme="https://simuty.com/tags/React/"/>
    
      <category term="Redux" scheme="https://simuty.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>22React实战系列-介入数据管理【2】</title>
    <link href="https://simuty.com/2020/04/22React%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97-%E4%BB%8B%E5%85%A5%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/"/>
    <id>https://simuty.com/2020/04/22React实战系列-介入数据管理/</id>
    <published>2020-04-23T10:13:32.000Z</published>
    <updated>2020-05-15T18:54:01.597Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/04/22React实战系列-介入数据管理/../../../images/photos/2020/007.jpg" width="60%"></p><p>民之从事，常于几成而败之。慎终如始，则无败事。--- 《道德经》第64章</p><a id="more"></a><h3 id="目标">目标</h3><ol type="1"><li>redux</li><li>redux-saga</li><li>immer</li><li>normalizr</li></ol><p>第一节结合antd搭建了页面框架、常见的表单、列表等，侧重点在于UI层面，完整的项目离不开<strong>UI与数据流</strong>，这节开始介入数据管理，之后根据具体的需求，综合开发；</p><p>这个部分内容量有点大，尽可能明朗一些。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/04/22React实战系列-介入数据管理/../../../images/photos/2020/007.jpg&quot; width=&quot;60%&quot;&gt;&lt;/p&gt;
&lt;p&gt;民之从事，常于几成而败之。慎终如始，则无败事。--- 《道德经》第64章&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="https://simuty.com/categories/React/"/>
    
    
      <category term="React" scheme="https://simuty.com/tags/React/"/>
    
      <category term="Redux" scheme="https://simuty.com/tags/Redux/"/>
    
      <category term="Redux-Saga" scheme="https://simuty.com/tags/Redux-Saga/"/>
    
  </entry>
  
  <entry>
    <title>Express Koa Redux 中间件对比</title>
    <link href="https://simuty.com/2020/04/16%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%AF%94%E8%BE%83/"/>
    <id>https://simuty.com/2020/04/16中间件比较/</id>
    <published>2020-04-16T10:13:32.000Z</published>
    <updated>2020-05-15T18:54:01.575Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/04/16中间件比较/../../../images/photos/2020/006.jpg" width="80%"></p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = compose</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">middleware</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 每个中间件都是一个 generator or async , 接收 【context 和 next】 两个参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">context, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> dispatch(<span class="number">0</span>)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt;= index) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'next() called multiple times'</span>))</span><br><span class="line">      index = i</span><br><span class="line">      <span class="comment">// 取出第 index 个中间件并执行</span></span><br><span class="line">      <span class="keyword">let</span> fn = middleware[i]</span><br><span class="line">      <span class="keyword">if</span> (i === middleware.length) fn = next</span><br><span class="line">      <span class="comment">// 如果所有中间件都执行完跳出，并返回一个 Promise</span></span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 每个中间件都是一个 generator or async , 接收 context 和 next 两个参数</span></span><br><span class="line">        <span class="comment">// 每个中间件调用都会在 next 调用处卡住知道递归执行下一个 dispatch ，取出下一个中间件</span></span><br><span class="line">        <span class="comment">// 这样只有后面的中间件的 dispatch resolve掉，前面的中间件才会继续执行，最外层的 dispatch(0) 才会 resolve 掉</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(fn(context, dispatch.bind(<span class="literal">null</span>, i + <span class="number">1</span>)));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看源码可以得出：</p><ol type="1"><li><p>dispatch方法是递归调用；</p></li><li><p>最重要的一行</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(fn(context, dispatch.bind(<span class="literal">null</span>, i + <span class="number">1</span>)));</span><br></pre></td></tr></table></figure><p>一步步解读</p><ol type="1"><li><strong>fn</strong> ： 是指中间件，即函数，包含（context 和 next）两个参数；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中间件实例</span></span><br><span class="line"><span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'B--'</span>)</span><br><span class="line">  next()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'--B'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li><p><strong>context</strong> ： 不作处理，直接采用外部传进来的；</p></li><li><p><strong>dispatch.bind(null, i + 1)</strong>：下一个中间件；</p></li></ol><p>因为dispatch是<code>递归调用</code>，进入下次调用，获取到中间件。</p><h3 id="执行步骤">执行步骤</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// koa 实例</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> A_M = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'A--'</span>)</span><br><span class="line">  <span class="keyword">await</span> next()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'--A'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> B_M = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'B--'</span>)</span><br><span class="line">  next()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'--B'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> C_M = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'C--'</span>)</span><br><span class="line">  ctx.body = <span class="string">'hello'</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'--C'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(A_M);</span><br><span class="line">app.use(B_M);</span><br><span class="line">app.use(C_M);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">5000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请打开: http://127.0.0.1:5000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol type="1"><li>dispatch(0)，Promise.resolve(fn(context, dispatch.bind(null, 0 + 1)))执行，第一个中间件内容将一直运行到 <code>await next()</code></li><li>执行<code>await next()</code>， next() = dispatch.bind(null, 0 + 1)，这是第二个中间件</li><li>第二个中间件将一直运行到 await next()</li><li>next()= dispatch.bind(null, 1 + 1)，这是第三个中间件</li><li>第三中间件将一直运行到 await next()</li><li>next()= dispatch.bind(null, 2 + 1)，没有第四种中间件，它将立即返回if (!fn) return Promise.resolve()，</li><li>await next()在第三个中间件中解析后，执行第三种中间件中的剩余代码。</li><li>await next()在第二中间件resolve了，剩余的则执行第二中间件的代码。</li><li>await next()在第一中间件resolve了，剩下的是执行在第一中间件代码。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这也就让我们看到了next函数到底是什么，是dispatch.bind(null, i + 1)。也正是通过dispatch将控制权移交给了下一个中间件。在use中await next()正式将控制权移交给下一个中间件，第一个 =&gt; 第二个 =&gt; ... =&gt; 最后一个，当最后一个中间件执行完毕时，此时，开始执行栈将当前栈顶执行环境出栈，最后一个 =&gt; 倒数第二个 =&gt; ... =&gt;第一个。也就形成了洋葱模型。</span><br><span class="line"></span><br><span class="line">作者：菩提谛听</span><br><span class="line">链接：</span><br><span class="line">来源：掘金</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><p>next方法相当于dispatch.bind(null, i+1),如果中间件不调用next()方法的话，程序执行流将会中断，说的直白一点就是下面一个中间件只有声明的机会却没有执行的机会</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> koa入口文件，<span class="string">`new Koa`</span> -&gt; <span class="string">`use(中间件)`</span>-&gt; <span class="string">`listen()`</span></span><br><span class="line"><span class="number">2.</span> listen回调函数中会触发**compose**</span><br><span class="line">   <span class="number">1.</span> 生成[A_M, B_M, C_M]数组；</span><br><span class="line"><span class="number">3.</span> 调用递归函数, 以下步骤主要涉及：**洋葱模型**</span><br><span class="line">   <span class="number">1.</span> 调用dispatch(<span class="number">0</span>), 获取到：<span class="built_in">Promise</span>.resolve(fn(context, dispatch.bind(<span class="literal">null</span>, <span class="number">0</span> + <span class="number">1</span>))); 即获取中间件 A_M;</span><br><span class="line">   <span class="number">2.</span> 输出中间件中的：A--</span><br><span class="line">   <span class="number">3.</span> 触发中间件中的： <span class="keyword">await</span> next(), 因为<span class="string">`next() = dispatch.bind(null, 0 + i)`</span></span><br><span class="line">   <span class="number">4.</span> 回调<span class="number">3.1</span> dispatch(<span class="number">1</span>), 得到中间件 B_M;</span><br><span class="line">   <span class="number">5.</span> 执行<span class="number">3.2</span> <span class="number">3.3</span>;</span><br><span class="line">   <span class="number">6.</span></span><br></pre></td></tr></table></figure><p>参考链接 <a href="https://www.ruanyifeng.com/blog/2018/06/javascript-this.html" target="_blank" rel="noopener">JavaScript 的 this 原理</a> <a href="https://segmentfault.com/a/1190000016843275" target="_blank" rel="noopener">傻瓜式解读koa中间件处理模块koa-compose</a> <a href="https://juejin.im/post/5e19beca5188252c6c477b94" target="_blank" rel="noopener">koa-compose源码解读</a> <a href="http://perkinzone.cn/2017/08/15/Redux,Koa,Express%E4%B9%8Bmiddleware%E6%9C%BA%E5%88%B6%E5%AF%B9%E6%AF%94/#2-koa%E7%9A%84middleware%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0" target="_blank" rel="noopener">Redux,Koa,Express之middleware机制对比</a> <a href="https://www.jianshu.com/p/70fb2405b281" target="_blank" rel="noopener">Express, Koa, Redux中间件的区别,写法和执行流程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/04/16中间件比较/../../../images/photos/2020/006.jpg&quot; width=&quot;80%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="中间件" scheme="https://simuty.com/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="Redux" scheme="https://simuty.com/tags/Redux/"/>
    
      <category term="Express" scheme="https://simuty.com/tags/Express/"/>
    
      <category term="Koa" scheme="https://simuty.com/tags/Koa/"/>
    
  </entry>
  
  <entry>
    <title>React实战系列-网易音乐&lt;1&gt;</title>
    <link href="https://simuty.com/2020/04/15React%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97-%E7%BD%91%E6%98%93%E9%9F%B3%E4%B9%901%20copy%202/"/>
    <id>https://simuty.com/2020/04/15React实战系列-网易音乐1 copy 2/</id>
    <published>2020-04-15T10:13:32.000Z</published>
    <updated>2020-05-15T18:54:01.534Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/04/15React实战系列-网易音乐1 copy 2/../../../images/photos/2020/006.jpg" width="80%"></p><a id="more"></a><blockquote><p>声明 本系列参考<a href="https://juejin.im/book/5da96626e51d4524ba0fd237" target="_blank" rel="noopener">React Hooks 与 Immutable 数据流实战</a>完成，每一章节都将整合：遇到的问题、个人思考、知识点汇总等。 在原有代码之上进行了修改。</p></blockquote><p>目标</p><ol type="1"><li>本系列目标<ol type="1"><li><p>熟悉前端开发流程</p></li><li><p>熟练掌握一种框架目录结构，熟练使用 React+Router+Redux 相关插件</p></li><li><p>掌握Redux数据流及其相关，如immer</p></li><li><p><strong>不打算掌握布局相关</strong>，因为实例不允许。。。</p></li></ol></li><li>本文目标<ol type="1"><li><p>构建项目、目录结构划分</p></li><li><p>router-config配置、react-thunk基本使用</p></li><li><p>、PureComponent+memo+Component相关</p></li><li><p>接入redux、immer使用</p></li></ol></li></ol><h1 id="第一部分-初始化">第一部分 初始化</h1><p>代码会放在<a href>github</a>上，以不同的分支来区分。</p><blockquote><p>该部分不属于重点</p></blockquote><h2 id="构建项目以及目录结构">构建项目以及目录结构</h2><p>采用<a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">Create React App</a>进行构建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line">cd my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>整理目录结构如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">├─api                   <span class="comment">// 网路请求代码、工具类函数和相关配置</span></span><br><span class="line">├─application           <span class="comment">// 项目核心功能</span></span><br><span class="line">│   └── Singers         <span class="comment">// 其中一个实例</span></span><br><span class="line">│       ├── index.js    <span class="comment">// 该路由入口文件</span></span><br><span class="line">│       ├── store       <span class="comment">// 存储相关</span></span><br><span class="line">│       │   ├── actionCreators.js   <span class="comment">// action 获取数据相关</span></span><br><span class="line">│       │   ├── constants.js    <span class="comment">// 常量</span></span><br><span class="line">│       │   ├── index.js    <span class="comment">// 导出配置</span></span><br><span class="line">│       │   └── reducer.js  <span class="comment">// reduer 接受action请求，整合数据，触发更新UI</span></span><br><span class="line">│       └── style.js</span><br><span class="line">├─assets                <span class="comment">// 字体配置及全局样式</span></span><br><span class="line">├─baseUI                <span class="comment">// 基础 UI 轮子</span></span><br><span class="line">├─components            <span class="comment">// 可复用的 UI 组件</span></span><br><span class="line">├─routes                <span class="comment">// 路由配置文件</span></span><br><span class="line">└─store                 <span class="comment">// redux 相关文件</span></span><br><span class="line">  App.js                <span class="comment">// 根组件</span></span><br><span class="line">  index.js              <span class="comment">// 入口文件</span></span><br><span class="line">  serviceWorker.js      <span class="comment">// PWA 离线应用配置</span></span><br><span class="line">  style.js              <span class="comment">// 默认样式</span></span><br></pre></td></tr></table></figure><p>该部分主要是采用了独立文件夹的方式存放文件、目录作用域划分等操作。属于习惯问题。</p><h2 id="第二部分-让框架跑起来">第二部分 让框架跑起来</h2><p>该项目包含react+router+redux+dom等主要模块的引用，故，如何安排相应的模块以及配置是个问题。</p><h3 id="router-config">router-config</h3><p>首先配置路由，在浏览器中可以见到不同的URL对应不同的页面，在此主要贴代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="comment">// 第一步，引用配置</span></span><br><span class="line"><span class="keyword">import</span> &#123; renderRoutes &#125; <span class="keyword">from</span> <span class="string">'react-router-config'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">            &lt;HashRouter&gt;</span><br><span class="line">                &#123;renderRoutes(routes)&#125;</span><br><span class="line">            &lt;<span class="regexp">/HashRouter&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Provider&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="react-router-config究竟做了什么">react-router-config究竟做了什么？</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// !源码</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Switch, Route &#125; <span class="keyword">from</span> <span class="string">"react-router"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderRoutes</span>(<span class="params">routes, extraProps = &#123;&#125;, switchProps = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> routes ? (</span><br><span class="line">    &lt;Switch &#123;...switchProps&#125;&gt;</span><br><span class="line"><span class="comment">// !主要是这句！</span></span><br><span class="line">      &#123;routes.map(<span class="function">(<span class="params">route, i</span>) =&gt;</span> (</span><br><span class="line">        &lt;Route</span><br><span class="line">          key=&#123;route.key || i&#125;</span><br><span class="line">          path=&#123;route.path&#125;</span><br><span class="line">          exact=&#123;route.exact&#125;</span><br><span class="line">          strict=&#123;route.strict&#125;</span><br><span class="line">          render=&#123;props =&gt;</span><br><span class="line">            route.render ? (</span><br><span class="line">              route.render(&#123; ...props, ...extraProps, <span class="attr">route</span>: route &#125;)</span><br><span class="line">            ) : (</span><br><span class="line">              &lt;route.component &#123;...props&#125; &#123;...extraProps&#125; route=&#123;route&#125; /&gt;</span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">  ) : null;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default renderRoutes;</span></span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="comment">// renderRoutes 这个方法只渲染一层路由, 需要在【父】【component】中加 &#123;renderRoutes(routes)&#125;</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">exact</span>: <span class="literal">true</span>, <span class="attr">render</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&#123;</span>'/<span class="attr">page1</span>'&#125; /&gt;</span></span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/page1'</span>, <span class="attr">component</span>: Page1 &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/page2'</span>,</span><br><span class="line">        component: Page2,</span><br><span class="line">        routes: [</span><br><span class="line">            &#123;</span><br><span class="line">                path: <span class="string">'/page2/child'</span>,</span><br><span class="line">                component: Child,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;HashRouter&gt;</span><br><span class="line">            &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">                &lt;h1&gt;Hello&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &#123;renderRoutes(routes)&#125;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/HashRouter&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="注意事项">注意事项</h4><ol type="1"><li><p>renderRoutes只渲染一层，故包含子路由的需要，需要在【父】【component】中加 {renderRoutes(routes)}</p></li><li><p>哈希路由 <code>#</code>, 是否重新获取资源？</p></li></ol><h3 id="component-vs-purecomponent-vs-memo">Component VS PureComponent VS memo</h3><blockquote><p>整个部分涉及React优化性能内容</p></blockquote><p>React核心开发团队一直都努力地让React变得更快。在React中可以用来优化组件性能的方法大概有以下几种: 1. 组件懒加载(React.lazy(...)和 <suspense>) 2. PureComponent 3. shouldComponentUpdate(...){...} 生命周期函数 4. React.memo()</suspense></p><h4 id="component-vs-purecomponent">Component VS PureComponent</h4><ol type="1"><li>默认Component遇到state Props 变化时，父子组件都更新。</li><li>Component通过shouldComponentUpdate生命周期函数进行判断是否更新组件；</li><li>PureComponent组件<strong>没有</strong>shouldComponentUpdate生命周期函数，组件内部自动判断时候需要更新。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>._compositeType === CompositeTypes.PureClass) &#123;</span><br><span class="line">  shouldUpdate = !shallowEqual(prevProps, nextProps) || ! shallowEqual(inst.state, nextState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React源码中很容易看到：shadowEqual只会"浅"检查组件的props和state，这就意味着嵌套对象和数组是不会被比较的。</p><p>PureComponent适合用于5展示的组件。</p><h4 id="purecomponent-vs-memo">PureComponent VS memo</h4><p>函数组件没有state、shouldComponentUpdate，故无法采用 <strong>生命周期｜｜自动浅比较</strong>的方式。</p><blockquote><p>React v16.6 引入 React.memo()</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// !需求》：现在有一个显示时间的组件,每一秒都会重新渲染一次</span></span><br><span class="line"><span class="comment">// ?对于Child组件我们肯定不希望也跟着渲染，所有需要用到PureComponent || React.momo()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Parent</span></span><br><span class="line"><span class="keyword">import</span> React  <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            date : <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                date:<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Child seconds=&#123;<span class="number">1</span>&#125;/&gt;</span><br><span class="line">                &lt;div&gt;&#123;<span class="keyword">this</span>.state.date.toString()&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Child</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">&#123;seconds&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'I am rendering'</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;I am update every &#123;seconds&#125; seconds&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>**</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * @param &#123;*&#125; prevProps 组件将会接收的下一个参数props</span><br><span class="line"> * @param &#123;*&#125; nextProps 组件的下一个状态state </span><br><span class="line"> * @returns</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">function areEqual(prevProps, nextProps) &#123;</span></span><br><span class="line"><span class="regexp">    if (prevProps.seconds === nextProps.seconds) &#123;</span></span><br><span class="line"><span class="regexp">        return true;</span></span><br><span class="line"><span class="regexp">    &#125; else &#123;</span></span><br><span class="line"><span class="regexp">        return false;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 第一个参数为纯函数的组件，</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 第二个参数用于对比props控制是否刷新，</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/      与shouldComponentUpdate()功能类似。</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default React.memo(Child, areEqual);</span></span><br><span class="line"><span class="regexp">/</span>* -------- React.memo ----------- *<span class="regexp">/</span></span><br></pre></td></tr></table></figure><p>PureComponent 🆚 VS 🆚 memo</p><ul><li>React.PureComponent是银</li><li>React.memo(...)是金</li><li>React.PureComponent是给ES6的类组件使用的</li><li>React.memo(...)是给函数组件使用的</li><li>React.PureComponent减少ES6的类组件的无用渲染</li><li>React.memo(...)减少函数组件的无用渲染</li></ul><h4 id="redux-devtools-extension-调试工具">redux-devtools-extension 调试工具</h4><p><a href="http://extension.remotedev.io/" target="_blank" rel="noopener">redux-devtools-extension 官网</a></p><figure><img src="/2020/04/15React实战系列-网易音乐1 copy 2/09.png" alt><figcaption>redux-devtools-extension</figcaption></figure><p><img src="/2020/04/15React实战系列-网易音乐1 copy 2/10.png" alt="使用说明"> 图片来源：https://blog.csdn.net/achenyuan/article/details/80884895</p><h2 id="第三部分-数据链路">第三部分 数据链路</h2><p>redux在之前的文章中已经有过学习，包含了主要的步骤以及概念。可以参考前几天的<a href="https://simuty.com/2020/04/10React%E7%B3%BB%E5%88%97-Redux/">----React系列-Redux&lt;2&gt;</a>。</p><p>可以参考下册两个图，加以回忆。</p><figure><img src="/2020/04/15React实战系列-网易音乐1 copy 2/04.gif" alt><figcaption>流程</figcaption></figure><figure><img src="/2020/04/15React实战系列-网易音乐1 copy 2/03.png" alt><figcaption>代码主要步骤</figcaption></figure><p>按照之前的理解就可以直接上手，初始化 action -&gt; dispatch -&gt; reducer =&gt; new state =&gt; update UI.</p><p>其中有个问题，如何 <strong>高效</strong> 的处理state事关 <strong>性能优劣</strong>。前一节，对<a href="https://simuty.com/2020/04/13React%E7%B3%BB%E5%88%97-immutable%E4%B8%8A%E4%B8%8B%E6%96%87/"></a></p><h3 id="react-redux-react-redux">react &amp; redux &amp; react-redux</h3><p>三者之间的关系可以看下册官方说明</p><ol type="1"><li>React：负责组件的UI界面渲染；</li><li>Redux：数据处理中心； <a href="https://redux.js.org/introduction/getting-started" target="_blank" rel="noopener">redux 官网</a></li><li>React-Redux：连接组件和数据中心，也就是把React和Redux联系起来。 <a href="https://react-redux.js.org/" target="_blank" rel="noopener">react-redux 官网</a></li></ol><figure><img src="/2020/04/15React实战系列-网易音乐1 copy 2/05.jpg" alt><figcaption>回顾下react生命周期</figcaption></figure><figure><img src="/2020/04/15React实战系列-网易音乐1 copy 2/06.jpg" alt><figcaption>redex核心</figcaption></figure><p><strong>React-Redux</strong></p><p>Redux 本身和React没有关系，只是数据处理中心，是React-Redux让他们联系在一起。</p><p>React-Redux提供两个方法： 1. connect: connect连接React组件和Redux store。connect实际上是一个<strong>高阶函数</strong>，返回一个新的已与Redux store连接的<strong>容器组件</strong>。</p><ol start="2" type="1"><li>Provider: 实现store的全局可访问，将store传给每个组件。<strong>原理</strong>：使用React的context，context可以实现跨组件之间的传递。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> VisibleTodoList = connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(TodoList)</span><br></pre></td></tr></table></figure><p>复制代码TodoList是 <strong>UI 组件</strong>，VisibleTodoList就是由 react-redux 通过connect方法自动生成的<strong>容器组件</strong>。</p><ol type="1"><li>mapStateToProps：从Redux状态树中提取需要的部分作为props传递给当前的组件。</li><li>mapDispatchToProps：将需要绑定的响应事件（action）作为props传递到组件上。</li></ol><figure><img src="/2020/04/15React实战系列-网易音乐1 copy 2/07.jpg" alt><figcaption>connent</figcaption></figure><h4 id="三者之间的关系">三者之间的关系</h4><figure><img src="/2020/04/15React实战系列-网易音乐1 copy 2/08.jpg" alt><figcaption>关系</figcaption></figure><h3 id="redux-thunk">redux-thunk</h3><p><a href="https://github.com/reduxjs/redux-thunk" target="_blank" rel="noopener">redux-thunk</a> With a plain basic Redux store, you can only do simple synchronous updates by dispatching an action. Middleware extend the store's abilities, and let you write async logic that interacts with the store.</p><p>Thunks are the recommended middleware for basic Redux side effects logic, including complex synchronous logic that needs access to the store, and simple async logic like AJAX requests.</p><p>学习 https://zhuanlan.zhihu.com/p/85403048</p><h2 id="第四部分-注意事项">第四部分 注意事项⚠️</h2><p>函数组件<code>mapStateToProps</code>拿到的数据是整个state 普通组件<code>mapStateToProps</code>拿到的数据是createRouter()中的reducer导出的默认值。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/04/15React实战系列-网易音乐1 copy 2/../../../images/photos/2020/006.jpg&quot; width=&quot;80%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="https://simuty.com/categories/React/"/>
    
    
      <category term="React" scheme="https://simuty.com/tags/React/"/>
    
      <category term="Redux" scheme="https://simuty.com/tags/Redux/"/>
    
      <category term="Immer" scheme="https://simuty.com/tags/Immer/"/>
    
  </entry>
  
  <entry>
    <title>React系列-immutable上下文&lt;4&gt;</title>
    <link href="https://simuty.com/2020/04/13React%E7%B3%BB%E5%88%97-immutable%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>https://simuty.com/2020/04/13React系列-immutable上下文/</id>
    <published>2020-04-13T02:31:37.000Z</published>
    <updated>2020-05-15T18:54:01.522Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/04/13React系列-immutable上下文/01.jpg" width="80%"></p><p>真正的无知不是知识的贫乏, 而是拒绝获取知识! ——波普尔 (哲学家 思想家)</p><a id="more"></a><blockquote><p>优化之减少渲染</p></blockquote><h1 id="目标">目标</h1><ul><li>diff算法</li><li>优化方式</li><li>Immutable以及替代品【重点】</li></ul><p>文章流程 &gt; React -&gt; 遇到问题 -&gt; 优化 -&gt; 优化方式 -&gt; 原理以及选择</p><h2 id="第一部分-diff算法以及问题">第一部分 diff算法以及问题</h2><p>React 采用的是虚拟 DOM (即 VDOM )，每次属性 (props) 和状态 (state) 发生<strong>变化</strong>的时候，render 函数返回不同的元素树，React 会检测当前返回的元素树和上次渲染的元素树之前的差异，然后针对差异的地方进行更新操作，最后渲染为真实 DOM，这就是整个 Reconciliation 过程，其<strong>核心就是进行新旧 DOM 树对比的 diff 算法。</strong></p><figure><img src="/2020/04/13React系列-immutable上下文/03.jpg" alt><figcaption>03</figcaption></figure><blockquote><p>为了获得更优秀的性能，首当其冲的工作便是 <strong>减少 diff</strong> 的过程，那么在保证应该更新的节点能够得到更新的前提下，这个 diff 的过程如何来避免呢？</p></blockquote><p>答案是利用 shouldComponentUpdate 这个生命周期函数。这个函数做了什么事情呢？</p><figure><img src="/2020/04/13React系列-immutable上下文/02.jpg" alt><figcaption>Diff 原理全解析</figcaption></figure><h2 id="第二部分-解决方案">第二部分 解决方案</h2><p>由第一部分中的流程图以及生命周期函数shouldComponentUpdate可知，如果想要<strong>该渲染的时候才渲染</strong>，就只能在此做操作。</p><blockquote><p>重点就在于：属性 (props) 和状态 (state) 什么时候发生变化。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> PureComponent (memo) 进行浅层比较</span><br><span class="line"><span class="number">2.</span> shouldComponentUpdate 中进行深层比对</span><br><span class="line"><span class="number">3.</span> immutable 数据结构 + SCU (memo) 浅层比对</span><br></pre></td></tr></table></figure><h3 id="深浅比较">深浅比较</h3><p>PureComponent (memo) 进行<strong>浅层比较</strong>。源码中有段代码中，一旦<strong>属性的值为引用类型</strong>的时候浅比较就失灵了。这种方式仅仅适用于无状态组件或者状态数据非常简单的组件，对于大量的应用型组件，它是无能为力的。</p><p>那么，如果在shouldComponentUpdate进行<strong>深层比较</strong>，即全比较，如果数据量大，则性能损耗严重。</p><blockquote><p>怎么解决这个问题?</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowEqual</span> (<span class="params">objA: mixed, objB: mixed</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 下面的 is 相当于 === 的功能，只是对 + 0 和 - 0，以及 NaN 和 NaN 的情况进行了特殊处理</span></span><br><span class="line">  <span class="comment">// 第一关：基础数据类型直接比较出结果</span></span><br><span class="line">  <span class="keyword">if</span> (is (objA, objB)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 第二关：只要有一个不是对象数据类型就返回 false</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> objA !== <span class="string">'object'</span> ||</span><br><span class="line">    objA === <span class="literal">null</span> ||</span><br><span class="line">    <span class="keyword">typeof</span> objB !== <span class="string">'object'</span> ||</span><br><span class="line">    objB === <span class="literal">null</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第三关：在这里已经可以保证两个都是对象数据类型，比较两者的属性数量</span></span><br><span class="line">  <span class="keyword">const</span> keysA = <span class="built_in">Object</span>.keys (objA);</span><br><span class="line">  <span class="keyword">const</span> keysB = <span class="built_in">Object</span>.keys (objB);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (keysA.length !== keysB.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第四关：比较两者的属性是否相等，值是否相等</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keysA.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      !hasOwnProperty.call (objB, keysA [i]) ||</span><br><span class="line">      !is (objA [keysA [i]], objB [keysA [i]])</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="状态对比">状态对比</h3><p>关于如何做对比以及采用何种方式，在第三部分由始说起</p><h2 id="第三部分-immutable-data-相关">第三部分 Immutable Data 相关</h2><p>鉴于上述问题，针对数据罗列主要的几种类型的数据结构，如下：</p><ul><li>不可变（Immutable）数据<ul><li>新数据结构<ul><li><a href="https://github.com/immutable-js/immutable-js" target="_blank" rel="noopener">facebook/immutable-js</a></li></ul></li></ul></li><li>不可变更新（Immutable Update）实用程序<ul><li><a href="https://github.com/mweststrate/immer" target="_blank" rel="noopener">mweststrate/immer</a></li></ul></li><li>Immutable/Redux 互操作<ul><li><a href="https://github.com/gajus/redux-immutable" target="_blank" rel="noopener">gajus/redux-immutable</a></li></ul></li></ul><h3 id="immutable-js">immutable-js</h3><p><strong>参考来源</strong> <a href="https://github.com/camsong/blog/issues/3" target="_blank" rel="noopener">Immutable 详解及 React 中实践</a></p><blockquote><p>Shared mutable state is the root of all evil（共享的可变状态是万恶之源） -- Pete Hunt</p></blockquote><figure><img src="/2020/04/13React系列-immutable上下文/04.png" alt><figcaption>04</figcaption></figure><p>JavaScript 中的对象一般是<strong>可变的（Mutable）</strong>，因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。如 foo={a: 1}; bar=foo; bar.a=2 你会发现此时 foo.a 也被改成了 2。</p><p>虽然这样做可以<strong>节约内存</strong>，但当应用复杂后，这就造成了非常大的隐患，Mutable 带来的优点变得得不偿失。</p><p>为了解决这个问题，一般的做法是使用 shallowCopy（浅拷贝）或 deepCopy（深拷贝）来避免被修改，但这样做造成了 CPU 和内存的浪费。</p><blockquote><p>Immutable 可以很好地解决这些问题。</p></blockquote><h4 id="immutable-data">Immutable Data</h4><p>Immutable Data 就是一旦创建，就不能再被更改的数据。对 Immutable 对象的任何修改或添加删除操作都会返回一个<strong>新的 Immutable 对象</strong>。</p><p>Immutable 实现的原理是 Persistent Data Structure（持久化数据结构），也就是使用旧数据创建新数据时，要<strong>保证旧数据同时可用且不变。</strong></p><p>同时为了<strong>避免 deepCopy</strong> 把所有节点都复制一遍带来的性能损耗，Immutable 使用了 Structural Sharing（结构共享），即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享。请看下面动画：</p><p><a href="/05.gif">05</a></p><p>Facebook 工程师 Lee Byron 花费 3 年时间打造，与 React 同期出现，但没有被默认放到 React 工具集里（React 提供了简化的 Helper）。它内部实现了一套完整的 <strong>Persistent Data Structure</strong>，还有很多易用的数据类型。像 Collection、List、Map、Set、Record、Seq。有非常全面的<code>map、filter、groupBy、reduce、find</code>函数式操作方法。同时 API 也尽量与 Object 或 Array 类似。</p><p>其中有 3 种最重要的数据结构说明一下：（Java 程序员应该最熟悉了）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>：键值对集合，对应于 <span class="built_in">Object</span>，ES6 也有专门的 <span class="built_in">Map</span> 对象</span><br><span class="line">List：有序可重复的列表，对应于 <span class="built_in">Array</span></span><br><span class="line"><span class="built_in">Set</span>：无序且不可重复的列表</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原来的写法</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> bar = foo;</span><br><span class="line">bar.a.b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo.a.b);  <span class="comment">// 打印 2</span></span><br><span class="line"><span class="built_in">console</span>.log(foo === bar);  <span class="comment">//  打印 true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 immutable.js 后</span></span><br><span class="line"><span class="keyword">import</span> Immutable <span class="keyword">from</span> <span class="string">'immutable'</span>;</span><br><span class="line">foo = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">1</span>&#125;&#125;);</span><br><span class="line">bar = foo.setIn([<span class="string">'a'</span>, <span class="string">'b'</span>], <span class="number">2</span>);   <span class="comment">// 使用 setIn 赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.getIn([<span class="string">'a'</span>, <span class="string">'b'</span>]));  <span class="comment">// 使用 getIn 取值，打印 1</span></span><br><span class="line"><span class="built_in">console</span>.log(foo === bar);  <span class="comment">//  打印 false</span></span><br></pre></td></tr></table></figure><p><strong>Immutable.is</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> map1 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">1</span>, <span class="attr">c</span>:<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">let</span> map2 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">1</span>, <span class="attr">c</span>:<span class="number">1</span>&#125;);</span><br><span class="line"><span class="comment">// 比较内存地址</span></span><br><span class="line">map1 === map2;             <span class="comment">// false</span></span><br><span class="line"><span class="comment">// Immutable.is 比较的是两个对象的 hashCode 或 valueOf（对于 JavaScript 对象）</span></span><br><span class="line">Immutable.is(map1, map2);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="优缺点">优缺点</h4><ol type="1"><li>Immutable 降低了 Mutable 带来的复杂度</li><li>节省内存</li><li>Undo/Redo，Copy/Paste，甚至时间旅行这些功能做起来小菜一碟</li><li>并发安全</li></ol><hr><ol type="1"><li>需要学习新的 API</li><li>增加了资源文件大小</li><li>容易与原生对象混淆</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; is &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</span><br><span class="line"></span><br><span class="line">shouldComponentUpdate: <span class="function">(<span class="params">nextProps = &#123;&#125;, nextState = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> thisProps = <span class="keyword">this</span>.props || &#123;&#125;, thisState = <span class="keyword">this</span>.state || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.keys(thisProps).length !== <span class="built_in">Object</span>.keys(nextProps).length ||</span><br><span class="line">      <span class="built_in">Object</span>.keys(thisState).length !== <span class="built_in">Object</span>.keys(nextState).length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> nextProps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!is(thisProps[key], nextProps[key])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> nextState) &#123;</span><br><span class="line">    <span class="keyword">if</span> (thisState[key] !== nextState[key] &amp;&amp; !is(thisState[key], nextState[key])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下图</p><p><img src="/2020/04/13React系列-immutable上下文/06.png"></p><h3 id="immerjs">immerjs</h3><p><a href="https://immerjs.github.io/immer/docs/introduction" target="_blank" rel="noopener">immer官网</a></p><p><a href="https://juejin.im/post/5aaf6d596fb9a028d207be00" target="_blank" rel="noopener">以下摘录--精读《Immer.js》源码</a></p><p>Immer 想解决的问题，是利用元编程简化 Immutable 使用的复杂度。 immer 是使用原生数据结构的 API 而不是内置的 API.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> produce = <span class="built_in">require</span>(<span class="string">'immer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  done: <span class="literal">false</span>,</span><br><span class="line">  val: <span class="string">'string'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newState = produce(state, (draft) =&gt; &#123;</span><br><span class="line">  draft.done = <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(state.done)    <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(newState.done) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">produce(obj, draft =&gt; &#123;</span><br><span class="line">  draft.count++</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>整体思路：draft 是 obj 的<strong>代理</strong>，对 draft mutable 的修改都会流入到<strong>自定义 setter 函数</strong>，它并不修改原始对象的值，而是递归父级不断<strong>浅拷贝</strong>，最终返回新的<strong>顶层对象</strong>，作为 produce 函数的<strong>返回</strong>值。</p><h4 id="构建代理">构建代理</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  modified, <span class="comment">// 是否被修改过</span></span><br><span class="line">  finalized, <span class="comment">// 是否已经完成（所有 setter 执行完，并且已经生成了 copy）</span></span><br><span class="line">  parent, <span class="comment">// 父级对象</span></span><br><span class="line">  base, <span class="comment">// 原始对象（也就是 obj）</span></span><br><span class="line">  copy, <span class="comment">// base（也就是 obj）的浅拷贝，使用 Object.assign(Object.create(null), obj) 实现</span></span><br><span class="line">  proxies, <span class="comment">// 存储每个 propertyKey 的代理对象，采用懒初始化策略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个代理对象上，绑定了自定义的 getter setter，然后直接将其扔给 <strong>produce 执行</strong>。</p><h4 id="getter">getter</h4><p>produce 回调函数中包含了<code>用户的 mutable 代码</code>。所以现在入口变成了 getter 与 setter。</p><p>getter 主要用来懒初始化代理对象，也就是<strong>当代理对象子属性被访问</strong>的时候，才会生成其代理对象。</p><ol type="1"><li>不浪费资源；</li><li>子对象可以被访问到。</li></ol><h4 id="setter">setter</h4><p>当对 draft 修改时，会对 base 也就是原始值进行<strong>浅拷贝</strong>，保存到 copy 属性，同时将 modified 属性设置为 true。这样就完成了最重要的 Immutable 过程，而且浅拷贝并不是很消耗性能，加上是按需浅拷贝，因此 Immer 的性能还可以。</p><p>同时为了保证整条链路的对象都是新对象，会根据 parent 属性递归父级，不断浅拷贝，直到这个叶子结点到根结点整条链路对象都换新为止。</p><p>完成了 modified 对象再有属性被修改时，会将这个新值保存在 copy 对象上。</p><h4 id="生成-immutable-对象">生成 Immutable 对象</h4><p>当<strong>执行完 produce</strong> 后，用户的所有修改已经完成（所以 Immer 没有支持异步），如果 <strong>modified</strong> 属性为 false，说明用户根本没有改这个对象，那直接返回原始 base 属性即可。</p><p>如果 modified 属性为 <strong>true</strong>，说明对象发生了修改，返回 <strong>copy 属性</strong>即可。但是 setter 过程是递归的，draft 的子对象也是 draft（包含了 base copy modified 等额外属性的代理），我们必须一层层递归，拿到真正的值。</p><p>所以在这个阶段，所有 draft 的 <strong>finalized</strong> 都是 <strong>false，copy</strong> 内部可能还存在大量 draft 属性，因此递归 base 与 copy 的子属性，如果相同，就直接返回；如果不同，递归一次整个过程（从这小节第一行开始）。</p><p>最后返回的对象是由 base 的一些属性（没有修改的部分）和 copy 的一些属性（修改的部分）最终拼接而成的。最后使用 freeze 冻结 copy 属性，将 <strong>finalized</strong> 属性设置为 <strong>true。</strong></p><p>至此，返回值生成完毕，我们将最终值保存在 copy 属性上，并将其冻结，返回了 Immutable 的值。</p><p>Immer 因此完成了不可思议的操作：Create the next immutable state by mutating the current one。</p><blockquote><p>源码读到这里，发现 Immer 其实可以支持异步，只要支持 produce 函数返回 Promise 即可。最大的问题是，最后对代理的 revoke 清洗，需要借助全局变量，这一点阻碍了 Immer 对异步的支持。</p></blockquote><p><img src="/2020/04/13React系列-immutable上下文/07.png"></p><p><a href="https://immerjs.github.io/immer/docs/introduction" target="_blank" rel="noopener">immer官网</a></p><h3 id="优点">优点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Immutability with normal JavaScript objects, arrays, Sets and Maps. No new APIs to learn!</span><br><span class="line">Strongly typed, no string based paths selectors etc.</span><br><span class="line">Structural sharing out of the box</span><br><span class="line">Object freezing out of the box</span><br><span class="line">Deep updates are a breeze</span><br><span class="line">Boilerplate reduction. Less noise, more concise code.</span><br><span class="line">First class support for patches</span><br><span class="line">Small: 3KB gzipped</span><br></pre></td></tr></table></figure><p>参考阅读： <a href="https://github.com/camsong/blog/issues/3" target="_blank" rel="noopener">Immutable详解及 React 中实践</a> <a href="https://juejin.im/entry/59b5e4916fb9a00a3b3bd52d" target="_blank" rel="noopener">精读 Immutable 结构共享</a> <a href="https://juejin.im/post/5b9b30a35188255c6418e67c" target="_blank" rel="noopener">深入探究Immutable.js的实现机制（一）</a> <a href="https://juejin.im/post/5ba4a6b75188255ca1537b19" target="_blank" rel="noopener">深入探究immutable.js的实现机制（二）</a> <a href="https://zhangzhao.name/posts/immer-immutable/" target="_blank" rel="noopener">immer.js 简介及源码简析</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/04/13React系列-immutable上下文/01.jpg&quot; width=&quot;80%&quot;&gt;&lt;/p&gt;
&lt;p&gt;真正的无知不是知识的贫乏, 而是拒绝获取知识! ——波普尔 (哲学家 思想家)&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES系列-数据类型&lt;1&gt;</title>
    <link href="https://simuty.com/2020/04/12ES%E7%B3%BB%E5%88%97-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://simuty.com/2020/04/12ES系列-数据类型/</id>
    <published>2020-04-12T10:28:53.000Z</published>
    <updated>2020-05-15T18:54:01.495Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/04/12ES系列-数据类型/../../../images/photos/2020/001.jpg" width="80%"></p><p>Software is like sex; it's better when it's free. ——Linus Torvalds (Linux之父)</p><a id="more"></a><h1 id="js-数据类型">JS 数据类型</h1><h3 id="第一部分-js的数据类型及其检测">第一部分 JS的数据类型及其检测</h3><h4 id="js数据类型总揽">JS数据类型总揽</h4><figure><img src="/2020/04/12ES系列-数据类型/03.jpg" alt><figcaption>07adp2x1cp.jpeg</figcaption></figure><figure><img src="/2020/04/12ES系列-数据类型/04.png" alt><figcaption>image.png</figcaption></figure><blockquote><p>简述，值类型与引用类型的图解示例。</p></blockquote><figure><img src="/2020/04/12ES系列-数据类型/05.png" alt><figcaption>截屏2020-03-25上午10.19.46.png</figcaption></figure><h4 id="typeof">typeof</h4><blockquote><p>只能区分基本类型</p></blockquote><figure><img src="/2020/04/12ES系列-数据类型/06.png" alt><figcaption>image.png</figcaption></figure><h4 id="栈堆">栈堆</h4><p><strong><a href="http://www.ruanyifeng.com/blog/2013/11/stack.html" target="_blank" rel="noopener">来源：Stack的三种含义</a></strong> ** 程序运行的时候，需要内存空间存放数据。一般来说，系统会划分出两种不同的内存空间：</p><ol type="1"><li>一种叫做stack（栈），</li><li>一种叫做heap（堆）。</li></ol><p>它们的主要区别是：</p><ol type="1"><li>stack是有结构的，每个区块按照一定次序存放，可以明确知道每个区块的大小；</li><li>heap是没有结构的，数据可以任意存放。因此，stack的寻址速度要快于heap。</li></ol><p>其他的区别还有，一般来说，每个线程分配一个stack，每个进程分配一个heap，也就是说，stack是线程独占的，heap是线程共用的。此外，stack创建的时候，大小是确定的，数据超过这个大小，就发生stack overflow错误，而heap的大小是不确定的，需要的话可以不断增加。</p><p>根据上面这些区别，数据存放的规则是：<strong>只要是局部的、占用空间确定的数据，一般都存放在stack里面，否则就放在heap里面</strong>。请看下面这段代码（来源）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> y=<span class="number">2</span>;</span><br><span class="line">    class1 cls1 = <span class="keyword">new</span> class1();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure><img src="/2020/04/12ES系列-数据类型/07.png" alt><figcaption>image.png</figcaption></figure><blockquote><p>当Method1方法运行结束，会发生什么事？</p></blockquote><p>回答是<strong>整个stack被清空</strong>，i、y和cls1这三个变量消失，因为它们是局部变量，区块一旦运行结束，就没必要再存在了。而<strong>heap之中的那个对象实例继续存在</strong>，直到系统的垃圾清理机制（garbage collector）将这块内存回收。因此，<strong>一般来说，内存泄漏都发生在heap，即某些内存空间不再被使用了，却因为种种原因，没有被系统回收。</strong></p><h3 id="第二部分-类型转换">第二部分 类型转换</h3><h4 id="tostring-valueof">ToString ValueOf</h4><p>Javascript 中几乎所有类型都具有<strong>toString和valueOf属性</strong>。几乎所有的类型对象比如<strong>Number,String,Boolean,Array,Function,Object,Date,RegExp</strong>的原型对象上都有各自的toString或valueOf方法的实现,故它们的实例化的对象自然就继承了这两个方法。下面看一下这些类型的原型对象上是否有这两个方法的实现： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>);    <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">Number</span>.prototype.hasOwnProperty(<span class="string">'valueOf'</span>);    <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">String</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>);    <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">String</span>.prototype.hasOwnProperty(<span class="string">'valueOf'</span>);    <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">Boolean</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>);    <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">Boolean</span>.prototype.hasOwnProperty(<span class="string">'valueOf'</span>);    <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>);     <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.hasOwnProperty(<span class="string">'valueOf'</span>);     <span class="comment">//输出false </span></span><br><span class="line"><span class="built_in">Function</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>);     <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.hasOwnProperty(<span class="string">'valueOf'</span>);     <span class="comment">//输出false</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>);     <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.hasOwnProperty(<span class="string">'valueOf'</span>);     <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">Date</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>);     <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">Date</span>.prototype.hasOwnProperty(<span class="string">'valueOf'</span>);     <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">RegExp</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>);     <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">RegExp</span>.prototype.hasOwnProperty(<span class="string">'valueOf'</span>);     <span class="comment">//输出false</span></span><br></pre></td></tr></table></figure></p><p>上面代码中，只有<strong>Array,Function,RegExp的原型上没有valueOf属</strong>性,但是为什么其实例化对象能调用该方法呢？ 我们都知道上面所有列举的类型的原型(prototype)都是继承于Object的原型(prototype)的，当Array,Function,RegExp的实例化对象找不到某个属性时会沿着原型链往上找，直到找到或给出undefined。<strong>其实例对象调用的是Object原型上的valueOf， </strong> <strong>valueOf()作用</strong></p><figure><img src="/2020/04/12ES系列-数据类型/08.png" alt><figcaption>image.png</figcaption></figure><h4 id="toprimitive">ToPrimitive</h4><p>抽象方法ToPrimitive将对象值转换为相应的基本类型值。该方法会 首先检查该值是否有valueOf()方法，如果有并且返回基本类型值，就使用该值进行强制类型转换； 如果没有就使用toString()的返回值(如果存在)来进行强制类型转换； 如果valueOf()和toString()均不返回基本类型值，会产生TypeError错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">var</span> b = [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">a + b   <span class="comment">//"1,23,4"</span></span><br></pre></td></tr></table></figure><ol type="1"><li>数组的valueOf()操作无法得到<strong>简单基本类型值</strong>，于是调用toString()，</li><li>因此两个数组变成了"1,2"和"3,4"</li><li><ul><li>将它们拼接后返回。</li></ul></li></ol><h4 id="汇总">汇总</h4><p>可以参考下册两张图，好好研究下</p><figure><img src="/2020/04/12ES系列-数据类型/09.png" alt><figcaption>image.png</figcaption></figure><figure><img src="/2020/04/12ES系列-数据类型/10.png" alt><figcaption>image.png</figcaption></figure><h4 id="练习题">练习题</h4><h5 id="section"><code>1. [] == ![]</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. []作为对象ToPrimitive得到 &apos;&apos;  </span><br><span class="line">2. ![]作为boolean转换得到0 </span><br><span class="line">a. ![] 等价于 !Boolean([])，除了六种情况外，Boolean()都是true</span><br><span class="line">3. &apos;&apos; == 0 </span><br><span class="line">4. 转换为 0==0 //true</span><br></pre></td></tr></table></figure><h5 id="undefined-false"><code>2. [undefined] == false</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 第一步，应用 规则5 ，[undefined]通过toString变成 &apos;&apos;,</span><br><span class="line">  题目变成  &apos;&apos; == false</span><br><span class="line">- 第二步，应用 规则2 ，题目变成  &apos;&apos; == 0</span><br><span class="line">- 第三步，应用 规则3 ，题目变成  0 == 0</span><br><span class="line">- 所以， 答案是 true ！</span><br><span class="line">// 但是 if([undefined]) 又是个true！</span><br></pre></td></tr></table></figure><p>参考文章 <a href="https://chinese.freecodecamp.org/news/javascript-implicit-type-conversion/" target="_blank" rel="noopener">Javascript 隐式类型转换，一篇就够了！</a> <a href="https://juejin.im/post/5b076c006fb9a07aa43c9fda#heading-8" target="_blank" rel="noopener">你可能忽略的js类型转换</a> <a href="https://juejin.im/post/5b3b76de5188251afc25567f#heading-3" target="_blank" rel="noopener">JavaScript中的强制类型转换</a> <a href="https://www.jianshu.com/p/91ffaf79de1c" target="_blank" rel="noopener">深入理解JavaScript中的toString，valueOf属性</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/04/12ES系列-数据类型/../../../images/photos/2020/001.jpg&quot; width=&quot;80%&quot;&gt;&lt;/p&gt;
&lt;p&gt;Software is like sex; it&#39;s better when it&#39;s free. ——Linus Torvalds (Linux之父)&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="https://simuty.com/categories/JS/"/>
    
    
  </entry>
  
  <entry>
    <title>React系列-setState&lt;3&gt;</title>
    <link href="https://simuty.com/2020/04/12React%E7%B3%BB%E5%88%97-setState/"/>
    <id>https://simuty.com/2020/04/12React系列-setState/</id>
    <published>2020-04-12T10:28:53.000Z</published>
    <updated>2020-05-15T18:54:01.520Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/04/12React系列-setState/01.jpg" width="80%"></p><p>我唯一能确定的就是自己的无知 ——苏格拉底 (哲学之父)</p><a id="more"></a><h2 id="目标">目标</h2><ul><li>理解setState为何知道更新</li><li>理解hooks的执行者</li></ul><hr><p>原文链接： <a href="https://overreacted.io/zh-hans/how-does-setstate-know-what-to-do/" target="_blank" rel="noopener">How Does setState Know What to Do?</a></p><hr><h3 id="疑惑">疑惑🤔：</h3><blockquote></blockquote><p>当你在组件中调用&gt; <code>setState</code>&gt; 的时候，你认为发生了些什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;;</span><br><span class="line"></span><br><span class="line">class Button extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123; clicked: false &#125;;</span><br><span class="line">    this.handleClick = this.handleClick.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">  // setState</span><br><span class="line">    this.setState(&#123; clicked: true &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    if (this.state.clicked) &#123;</span><br><span class="line">      return &lt;h1&gt;Thanks&lt;/h1&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">    return (</span><br><span class="line">      &lt;button onClick=&#123;this.handleClick&#125;&gt;</span><br><span class="line">        Click me!</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Button /&gt;, document.getElementById(&apos;container&apos;));</span><br></pre></td></tr></table></figure><p>当然是：React根据下一个状态<code>{clicked：true}</code>重新渲染组件，同时更新DOM以匹配返回的<code>&lt;h1&gt;Thanks&lt;/ h1&gt;</code>元素啊。</p><p>看起来很直白。但是等等，<strong>是 <em>React_做了这些吗 ？还是_React DOM </em>？</strong> **</p><hr><blockquote><p>疑惑🤔： 我们或许会认为：<code>React.Component</code>类包含了DOM更新的逻辑。</p></blockquote><p>但是如果是这样的话，<code>this.setState()</code>又如何能在其他环境下使用呢？举个例子，React Native app中的组件也是继承自<code>React.Component</code>。他们依然可以像我们在上面做的那样调用<code>this.setState()</code>，而且React Native渲染的是安卓和iOS原生的界面而不是DOM。 因此，<strong><code>React.Component</code>以某种未知的方式将处理状态（state）更新的任务委托给了特定平台的代码。</strong>在我们理解这些是如何发生的之前，让我们深挖一下包（packages）是如何分离的以及为什么这样分离。 **</p><hr><blockquote><p>疑惑😂： 有一个很常见的误解就是React“引擎”是存在于<code>react</code>包里面的。 然而事实并非如此。</p></blockquote><p>** 实际上从<a href="https://reactjs.org/blog/2015/07/03/react-v0.14-beta-1.html#two-packages" target="_blank" rel="noopener">React 0.14</a>我们将代码拆分成多个包以来，<code>react</code>包故意只暴露一些定义组件的API。绝大多数React的_实现_都存在于“渲染器（renderers）”中。 &gt; <code>react-dom</code>、<code>react-dom/server</code>、 <code>react-native</code>、 <code>react-test-renderer</code>、 <code>react-art</code>都是常见的渲染器（当然你也可以<a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/README.md#practical-examples" target="_blank" rel="noopener">创建属于你的渲染器</a>）。    </p><p>这就是为什么不管你的目标平台是什么，<code>react</code>包都是可用的。从<code>react</code>包中导出的一切，比如<code>React.Component</code>、<code>React.createElement</code>、 <code>React.Children</code> 和（最终的）<a href="https://reactjs.org/docs/hooks-intro.html" target="_blank" rel="noopener">Hooks</a>，都是独立于目标平台的。无论你是运行React DOM，还是 React DOM Server,或是 React Native，你的组件都可以使用同样的方式导入和使用。 ** 相比之下，渲染器包暴露的都是特定平台的API，比如说：<code>ReactDOM.render()</code>，可以让你将React层次结构（hierarchy）挂载进一个DOM节点。每一种渲染器都提供了类似的API。理想状况下，绝大多数_组件_都不应该从渲染器中导入任何东西。只有这样，组件才会更加灵活。</p><hr><blockquote><p><strong>✌️</strong> <strong>和大多数人现在想的一样，React “引擎”就是存在于各个渲染器的内部。</strong></p></blockquote><p>** 很多渲染器包含一份同样代码的复制 —— 我们称为<a href="https://github.com/facebook/react/tree/master/packages/react-reconciler" target="_blank" rel="noopener">“协调器”(“reconciler”)</a>。<a href="https://reactjs.org/blog/2017/12/15/improving-the-repository-infrastructure.html#migrating-to-google-closure-compiler" target="_blank" rel="noopener">构建步骤(build step)</a>将协调器代码和渲染器代码平滑地整合成一个高度优化的捆绑包（bundle）以获得更高的性能。（代码复制通常来说不利于控制捆绑包的大小，但是绝大多数React用户同一时间只会选用一个渲染器，比如说<code>react-dom</code>。）</p><p>这里要注意的是： <code>react</code>包仅仅是让你_使用_ React 的特性，但是它完全不知道这些特性是_如何_实现的。而渲染器包(<code>react-dom</code>、<code>react-native</code>等)提供了React特性的实现以及平台特定的逻辑。这其中的有些代码是共享的(“协调器”)，但是这就涉及到各个渲染器的实现细节了。 **</p><hr><blockquote><p>🤩： 现在我们知道为什么当我们想使用新特性时，<code>react</code> 和 <code>react-dom</code>_都_需要被更新。</p></blockquote><p>** 举个例子，当React 16.3添加了Context API，<code>React.createContext()</code>API会被React包暴露出来。 但是<code>React.createContext()</code> 其实并没有_实现_ context。因为在React DOM 和 React DOM Server 中同样一个 API 应当有不同的实现。所以<code>createContext()</code>只返回了一些普通对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 简化版代码</span><br><span class="line">function createContext(defaultValue) &#123;</span><br><span class="line">  let context = &#123;</span><br><span class="line">    _currentValue: defaultValue,</span><br><span class="line">    Provider: null,</span><br><span class="line">    Consumer: null</span><br><span class="line">  &#125;;</span><br><span class="line">  context.Provider = &#123;</span><br><span class="line">    $$typeof: Symbol.for(&apos;react.provider&apos;),</span><br><span class="line">    _context: context</span><br><span class="line">  &#125;;</span><br><span class="line">  context.Consumer = &#123;</span><br><span class="line">    $$typeof: Symbol.for(&apos;react.context&apos;),</span><br><span class="line">    _context: context,</span><br><span class="line">  &#125;;</span><br><span class="line">  return context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong> </strong> 当你在代码中使用 <code>&lt;MyContext.Provider&gt;</code> 或 <code>&lt;MyContext.Consumer&gt;</code>的时候， 是**_渲染器决定如何处理这些接口。React DOM也许用某种方式追踪context的值，但是React DOM Server用的可能是另一种不同的方式。</p><p><strong>所以，如果你将<code>react</code>升级到了16.3+，但是不更新<code>react-dom</code>，那么你就使用了一个尚不知道<code>Provider</code> 和 <code>Consumer</code>类型的渲染器。</strong>这就是为什么一个老版本的<code>react-dom</code>会<a href="https://stackoverflow.com/a/49677020/458193" target="_blank" rel="noopener">报错说这些类型是无效的</a>。</p><hr><blockquote><p><code>疑问😑😑</code> <code>react</code>包并不包含任何有趣的东西，除此之外，具体的实现也是存在于<code>react-dom</code>，<code>react-native</code>之类的渲染器中。但是这并没有回答我们的问题。<code>React.Component</code>中的<code>setState()</code>如何与正确的渲染器“对话”？</p></blockquote><p><strong> </strong>答案是：每个渲染器都在已创建的类上设置了一个特殊的字段。**这个字段叫做<code>updater</code>。这并不是_你_要设置的的东西——而是，React DOM、React DOM Server 或 React Native在创建完你的类的实例之后会立即设置的东西：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// React DOM 内部</span><br><span class="line">const inst = new YourComponent();</span><br><span class="line">inst.props = props;</span><br><span class="line">inst.updater = ReactDOMUpdater;</span><br><span class="line"></span><br><span class="line">// React DOM Server 内部</span><br><span class="line">const inst = new YourComponent();</span><br><span class="line">inst.props = props;</span><br><span class="line">inst.updater = ReactDOMServerUpdater;</span><br><span class="line"></span><br><span class="line">// React Native 内部</span><br><span class="line">const inst = new YourComponent();</span><br><span class="line">inst.props = props;</span><br><span class="line">inst.updater = ReactNativeUpdater;</span><br></pre></td></tr></table></figure><p>** 查看<a href="https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react/src/ReactBaseClasses.js#L58-L67" target="_blank" rel="noopener"><code>React.Component</code>中<code>setState</code>的实现</a>， <code>setState</code>所做的一切就是委托渲染器创建这个组件的实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 适当简化的代码</span><br><span class="line">setState(partialState, callback) &#123;</span><br><span class="line">  // 使用`updater`字段回应渲染器！</span><br><span class="line">  this.updater.enqueueSetState(this, partialState, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>** 这就是this.setState()<code>尽管定义在React包中，却能够更新DOM的原因。它读取由React DOM设置的</code>this.updater`，让React DOM安排并处理更新。</p><h3 id="小结">✌️✌️✌️小结</h3><ol type="1"><li>setState缘由</li><li>存放位置以及如何通信</li><li>渲染器被指派处理state的变化。</li></ol><hr><h3 id="疑惑-1">疑惑🤔🤔🤔：</h3><blockquote><p>当使用Hooks时，<code>useState是</code>怎么 “知道要做什么”的 ？</p></blockquote><p>当人们第一次看见<a href="https://reactjs.org/docs/hooks-intro.html" target="_blank" rel="noopener">Hooks proposal API</a>，他们可能经常会想： <code>useState是</code>怎么 “知道要做什么”的？然后假设它比那些包含<code>this.setState()</code>的<code>React.Component</code>类更“神奇”。</p><p>但是正如我们今天所看到的，<strong>基类中<code>setState()</code>的执行一直以来都是一种错觉。它除了将调用转发给当前的渲染器外，什么也没做</strong>。<code>useState</code> Hook<a href="https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react/src/ReactHooks.js#L55-L56" target="_blank" rel="noopener">也是做了同样的事情</a>。 <strong> </strong>Hooks使用了一个“dispatcher”对象，代替了<code>updater</code>字段。**当你调用<code>React.useState()</code>、<code>React.useEffect()</code>、 或者其他内置的Hook时，这些调用被转发给了当前的dispatcher。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// React内部(适当简化)</span><br><span class="line">const React = &#123;</span><br><span class="line">  // 真实属性隐藏的比较深，看你能不能找到它！</span><br><span class="line">  __currentDispatcher: null,</span><br><span class="line"></span><br><span class="line">  useState(initialState) &#123;</span><br><span class="line">    return React.__currentDispatcher.useState(initialState);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  useEffect(initialState) &#123;</span><br><span class="line">    return React.__currentDispatcher.useEffect(initialState);</span><br><span class="line">  &#125;,</span><br><span class="line">  // ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>各个渲染器会在渲染你的组件之前设置dispatcher：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// React DOM 内部</span><br><span class="line">const prevDispatcher = React.__currentDispatcher;</span><br><span class="line">React.__currentDispatcher = ReactDOMDispatcher;</span><br><span class="line">let result;</span><br><span class="line">try &#123;</span><br><span class="line">  result = YourComponent(props);</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">  // 恢复原状</span><br><span class="line">  React.__currentDispatcher = prevDispatcher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>      举个例子， React DOM Server的实现是在<a href="https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-dom/src/server/ReactPartialRendererHooks.js#L340-L354" target="_blank" rel="noopener">这里</a>，还有就是React DOM 和 React Native共享的协调器的实现在<a href="https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-reconciler/src/ReactFiberHooks.js" target="_blank" rel="noopener">这里</a>。</p><p>这就是为什么像<code>react-dom</code>这样的渲染器需要访问那个你调用Hooks的<code>react</code>包。否则你的组件将不会“看见”dispatcher！如果在一个组件树中存在<a href="https://github.com/facebook/react/issues/13991" target="_blank" rel="noopener">React的多个副本</a>，也许并不会这样。但是，这总是导致了一些模糊的错误，因此Hooks会强迫你在出现问题之前解决包的重复问题。</p><p>在高级工具用例中，你可以在技术上覆盖dispatcher，尽管我们不鼓励这种操作。（对于<code>__currentDispatcher</code>这个名字我撒谎了，但是你可以在React仓库中找到真实的名字。）比如说， React DevTools将会使用<a href="https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-debug-tools/src/ReactDebugHooks.js#L203-L214" target="_blank" rel="noopener">一个专门定制的dispatcher</a>通过捕获JavaScript堆栈跟踪来观察Hooks树。<em>请勿模仿。</em></p><p>这也意味着Hooks本质上并没有与React绑定在一起。如果未来有更多的库想要重用同样的原生的Hooks, 理论上来说dispatcher可以移动到一个分离的包中，然后暴露成一个一等（first-class）的API，然后给它起一个不那么“吓人”的名字。但是在实践中，我们会尽量避免过早抽象，直到需要它为止。</p><p><code>updater</code>字段和<code>__currentDispatcher</code>对象都是称为<strong><em>依赖注入</em></strong>的通用编程原则的形式。在这两种情况下，渲染器将诸如<code>setState</code>之类的功能的实现“注入”到通用的React包中，以使组件更具声明性。</p><p>使用React时，你无需考虑这其中的原理。我们希望React用户花更多时间考虑他们的应用程序代码，而不是像依赖注入这样的抽象概念。但是如果你想知道<code>this.setState()</code>或<code>useState()</code>是如何知道该做什么的，我希望这篇文章会有所帮助。</p><p>参考链接 <a href="https://juejin.im/post/5c31b814f265da612b13bf23" target="_blank" rel="noopener">react 渲染器了解一下？</a> <a href="https://juejin.im/post/5ae2a019f265da0b736d5f46" target="_blank" rel="noopener">Dependency Injection-依赖注入详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/04/12React系列-setState/01.jpg&quot; width=&quot;80%&quot;&gt;&lt;/p&gt;
&lt;p&gt;我唯一能确定的就是自己的无知 ——苏格拉底 (哲学之父)&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="https://simuty.com/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>Reac实战系列-单页面&lt;1&gt;</title>
    <link href="https://simuty.com/2020/04/11Reac%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97-%E5%8D%95%E9%A1%B5%E9%9D%A2/"/>
    <id>https://simuty.com/2020/04/11Reac实战系列-单页面/</id>
    <published>2020-04-11T05:43:07.000Z</published>
    <updated>2020-05-15T18:54:01.378Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/04/11Reac实战系列-单页面/01.jpg" width="80%"></p><p>知识上的投资总能得到最好的回报。 ——本杰明.富兰克林 (美国开国元勋 物理学家 作家)</p><a id="more"></a><p>目标: 结合前几篇文章，汇总一个小Demo.</p><h1 id="react实战">React实战</h1><p>本示例依照<a href="https://www.yuque.com/ant-design/course/wybhm9" target="_blank" rel="noopener">Ant Design 实战教程（beta 版）</a>进行编写，非常感谢各位大佬的倾情付出！谢谢🙏</p><blockquote><p>正是江南好风景，落花时节学代码</p></blockquote><figure><img src="/2020/04/11Reac实战系列-单页面/03.gif" alt><figcaption>react1.gif</figcaption></figure><p>有了前两节的铺垫，这个<a href="https://www.yuque.com/ant-design/course/wybhm9" target="_blank" rel="noopener">Ant Design 实战教程（beta 版）</a>也觉得挺顺手的，汇总下编写的流程以及接下来要进一步学习的内容。</p><h3 id="第一部分-整体概述">第一部分 整体概述</h3><p>该demo是个典型的SPA项目，实现功能如布局、侧边栏、列表、表格、弹窗等，其中包含：</p><ul><li>应用框架：<a href="https://umijs.org/zh-CN/docs" target="_blank" rel="noopener">Umi</a></li><li>数据流：<a href="https://dvajs.com/guide/" target="_blank" rel="noopener">DvaJs</a></li><li>UI: <a href="https://ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">Antd</a></li></ul><blockquote><p><a href="https://umijs.org/zh-CN/docs" target="_blank" rel="noopener">Umi</a>，中文可发音为<strong>乌米</strong>, 是可扩展的企业级前端应用框架。Umi 以路由为基础的，同时支持配置式路由和约定式路由，保证路由的功能完备，并以此进行功能扩展。然后配以生命周期完善的插件体系，覆盖从源码到构建产物的每个生命周期，支持各种功能扩展和业务需求。</p></blockquote><blockquote><p><a href="https://dvajs.com/guide/" target="_blank" rel="noopener">DvaJs</a>首先是一个基于 <a href="https://github.com/reduxjs/redux" target="_blank" rel="noopener">redux</a> 和 <a href="https://github.com/redux-saga/redux-saga" target="_blank" rel="noopener">redux-saga</a> 的数据流方案，然后为了简化开发体验，dva 还额外内置了 <a href="https://github.com/ReactTraining/react-router" target="_blank" rel="noopener">react-router</a> 和 <a href="https://github.com/github/fetch" target="_blank" rel="noopener">fetch</a>，所以也可以理解为一个轻量级的应用框架。</p></blockquote><blockquote><p><a href="https://ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">Antd</a> 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">hhw-4:antd-course hhw$ tree -L 4 -I node_modules</span><br><span class="line">.</span><br><span class="line">├── config #配置文件</span><br><span class="line">│   └── config.js</span><br><span class="line">├── dist</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── umi.js</span><br><span class="line">├── mock</span><br><span class="line">│   └── articleMock.js</span><br><span class="line">├── package.json</span><br><span class="line">└── src</span><br><span class="line">    ├── layout</span><br><span class="line">    │   └── index.js</span><br><span class="line">    ├── models</span><br><span class="line">    │   ├── articleModel.js</span><br><span class="line">    │   ├── chartModel.js</span><br><span class="line">    │   └── complexArticleModel.js</span><br><span class="line">    ├── pages</span><br><span class="line">    │   ├── Chart</span><br><span class="line">    │   │   └── ChartClass.js</span><br><span class="line">    │   ├── Complex</span><br><span class="line">    │   │   ├── Article.js</span><br><span class="line">    │   │   └── ComplexArticle.js</span><br><span class="line">    │   ├── Dashboard</span><br><span class="line">    │   │   ├── Analysis.js</span><br><span class="line">    │   │   ├── Monitor.js</span><br><span class="line">    │   │   └── Workplace.js</span><br><span class="line">    │   └── HelloWorld.js</span><br><span class="line">    ├── service</span><br><span class="line">    │   └── chart.js</span><br><span class="line">    └── util</span><br><span class="line">        └── request.js</span><br></pre></td></tr></table></figure><p>其实有了React、Redux的基础，示例代码很容易看懂，在这里就不贴代码了，罗列一些操作中疑惑的地方。</p><h2 id="第二部分">第二部分</h2><h3 id="一dvajs--effect">一、DvaJs--Effect</h3><p>Reducer如果做了异步操作，将破坏redux中reducer是纯函数的机制，effect 就是专门处理这些具有 "副作用" 的操作的执行单元。 #### <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespace: <span class="string">'some_namespace'</span>,</span><br><span class="line">  state: &#123;&#125;,</span><br><span class="line">  effects: &#123; <span class="comment">// 定义 effects 成员</span></span><br><span class="line">    <span class="string">'someEffect'</span>: <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    <span class="string">'someOtherEffect'</span>: <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>宏观上看，effect 是一层中间件。</li><li>局部上看 effect 就是一个一个的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*" target="_blank" rel="noopener">generator function</a>。 #### #### 1. 中间层 &gt; 什么是中间层？ &gt; " Middleware is some code you can put between the framework receiving a request, and the framework generating a response. "</li></ul><p>       当 action 被 dispatch 之后，会先到达 effect 处理副作用，然后该 effect 最终会促使新的 action 发送出去，这个新的 action 可能被其他的 effect 再捕获继续处理，也可能被 reducer 捕获并结束，无论怎样，最终处理逻辑的终点都将是 reducer。 #### 2. generator function。</p><figure><img src="/2020/04/11Reac实战系列-单页面/02.png" alt><figcaption>image.png</figcaption></figure><p>异步的实质是事件发生促使程序的执行点来回跳转。我们使用 callback 本质上是描述跳转的一种手段。generator function 并没有改变异步的本质，只是改变了描述的方式，使得程序看起来像是同步一样。 一个 generator function 在执行时有 <strong>两方</strong>。一方是 generator function 本身，另一方是 generator function 的句柄持有者，而这一般都是框架所持有。我们姑且称这个句柄为 genStub。当框架调用 genStub.next() 时，generator function 会执行到下一个 <code>yield</code> 然后暂停，并把 yield 后面表达式的计算值返还给框架，同时把程序执行权交给框架。框架拿到值后做处理，比如就是异步处理，处理结束拿到结果，再次调用 genStub.next()，返还值给 generator function 同时驱动它恢复执行。当恢复执行时，你可以认为 <strong>返回的处理结果会整体替换 <code>yield &lt;expression&gt;</code></strong>，然后程序继续执行到下一个 yield。</p><blockquote><p>yield 这个单词用在这里特别形象：yield 本身有「让步」的意思，也有「产出」的意思。</p></blockquote><p><strong>「generator function yield 到外部的值」和「外部返还给 generator function 的值」不是一回事！！！</strong> <strong> #### 3. 使用 入参有两个对象，第一个对象就是匹配这个 effect 的 action 对象，因此可以取到约定的 </strong>payload** 这个字段，第二个对象是** <em>effect 原语集</em>**，其中 <code>call</code>, <code>put</code> 最为常用，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">call: 阻塞 用于调用异步逻辑，支持 promise</span><br><span class="line">put: 不阻塞 用于触发 action,一般来触发reducer改变state</span><br><span class="line">select: 不阻塞 用于从 state 里获取数据</span><br><span class="line">take: 阻塞 dva封装了take，可以监听action的开始和结束阶段，take会阻塞到监听的事件触发，才执行下一步</span><br></pre></td></tr></table></figure><p><strong>示例</strong> <img src="/2020/04/11Reac实战系列-单页面/04.png" alt="image.png"></p><h3 id="二代理">二、代理</h3><p>在前端开发中，一种常见的规避跨域的方法就是：把 ajax 请求发送到你的本地开发服务器，然后本地开发服务器再把 ajax 请求转发到远端去，从网络拓扑上看本地开发服务器起着「反向代理」的作用。本地服务器和远端服务器是「服务器和服务器间的通信」，就不存在跨域问题了。</p><p>配置代理也很简单，只需要您在配置文件 config/config.js 中与 routes 同级处增加 proxy 字段，代码如下，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+  proxy: &#123;</span><br><span class="line">+    <span class="string">'/dev'</span>: &#123;</span><br><span class="line">+      target: <span class="string">'https://08ad1pao69.execute-api.us-east-1.amazonaws.com'</span>,</span><br><span class="line">+      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">+    &#125;,</span><br><span class="line">+  &#125;,</span><br></pre></td></tr></table></figure><p>配置的含义是：去往本地服务器 localhost:8000 的 ajax 调用中，如果是以 <code>/dev</code> 开头的，那么就转发到远端的 <code>https://08ad1pao69.execute-api.us-east-1.amazonaws.com</code> 服务器当中，<code>/dev</code> 也会保留在转发地址中。</p><figure><img src="/2020/04/11Reac实战系列-单页面/05.png" alt><figcaption>image.png</figcaption></figure><h3 id="三二次封装">三、二次封装</h3><p>Antd真的很赞！对于开发者而言，公共的代码其实可以二次封装一下，比如from表单等，可以减少不少的代码。</p><h3 id="四css-modules">四、CSS Modules</h3><figure><img src="/2020/04/11Reac实战系列-单页面/06.png" alt><figcaption>image.png</figcaption></figure><p><a href="https://github.com/camsong/blog/issues/5" target="_blank" rel="noopener">CSS Modules 详解及 React 中实践</a> <a href>CSS MODULES用法教程</a></p><p><strong>CSS modules</strong> 将生成全局唯一的hash值【标签实际的class】。通过全局唯一的class name 变相的就可以获取到<strong>局部作用域【scoped css】，</strong>如果一个 CSS 文件仅仅是作用在某个局部的话，我们称这样一个 CSS 文件为 <em>CSS module</em>。 <strong>注意：很多 CSS 选择器是不会被 CSS Modules 处理的，比如 body、div 、a 这样的 HTML 标签名就不会。我们推荐如果要定义局部 css 样式/动画， 只使用 class 或 <span class="citation" data-cites="keyframe">@keyframe</span>。</strong></p><p><strong><a href="https://less.bootcss.com/" target="_blank" rel="noopener">Less 官方文档</a></strong> <strong> &gt; <a href="http://lesscss.org/usage/" target="_blank" rel="noopener">Less</a> 是一个 CSS 的超集，Less 允许我们</strong>_定义变量_<strong>，使用</strong>_嵌套式声明，定义函数_**等。严格说 Less 包含两部分：1. Less 的语法。2. Less 预处理器（Less preprocessor）。浏览器终究只认识 CSS，所以 Less 文件需要经过 Less 预处理器编译成为 CSS。 &gt; &gt; 在工具的支持下，一个 Less 文件首先会经过 CSS modules 的编译，把类名全局唯一化，然后才被 Less preprocessor 编译成为 CSS 文件。正因此，Less 文件可以和 CSS modules 无缝联合使用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// less 文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 常量</span><br><span class="line">@grey-color: rgba(0, 0, 0, 0.25);</span><br><span class="line"></span><br><span class="line">// 类嵌套</span><br><span class="line"><span class="selector-class">.hello</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">32px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#30b767</span>;</span><br><span class="line">  .deleted &#123;</span><br><span class="line">    <span class="selector-tag">text-decoration</span>: <span class="selector-tag">line-through</span>;</span><br><span class="line">    <span class="selector-tag">background-color</span>: <span class="keyword">@grey-color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 重写Antd样式</span><br><span class="line"><span class="selector-class">.override-ant-btn</span> &#123;</span><br><span class="line">  // CSS Modules 允许使用:global(.className)的语法，声明一个全局规则。凡是这样声明的class，都不会被编译成哈希字符串。</span><br><span class="line">  <span class="selector-pseudo">:global(.ant-btn)</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;commonStyles.hello&#125;</span>&gt;</span> css module <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;lessStyles.hello&#125;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&#123;lessStyles.deleted&#125;</span>&gt;</span>Less class 嵌套<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&#123;lessStyles[</span>'<span class="attr">override-ant-btn</span>']&#125;&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">Button</span>&gt;</span>圆角样式按妞<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">Button</span>&gt;</span>antd 原始按钮<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure><img src="/2020/04/11Reac实战系列-单页面/07.png" alt><figcaption>image.png</figcaption></figure><p>最后强调，global 不应该被滥用，特别地我们建议：若想在某个文件中覆盖 antd 样式，请加上一个类似 <code>.override-ant-btn</code> 的类包裹住 global 修饰的名称，以避免全局样式声明分散在项目各处。</p><p>还有很多待补充的内容，边做边学</p><p>参考链接</p><ul><li>阮一峰老师的 <a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html" target="_blank" rel="noopener">redux 三部曲</a>。</li><li>redux-saga 的<a href="http://leonshi.com/redux-saga-in-chinese/docs/api/index.html" target="_blank" rel="noopener">中文文档</a>。</li><li><a href="https://dvajs.com/guide/develop-complex-spa.html#%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDmodel" target="_blank" rel="noopener">使用 Dva 开发复杂 SPA</a></li><li><a href="https://dvajs.com/guide/source-code-explore.html#%E9%9A%90%E8%97%8F%E5%9C%A8-package-json-%E9%87%8C%E7%9A%84%E7%A7%98%E5%AF%86" target="_blank" rel="noopener">Dva源码解析</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/04/11Reac实战系列-单页面/01.jpg&quot; width=&quot;80%&quot;&gt;&lt;/p&gt;
&lt;p&gt;知识上的投资总能得到最好的回报。 ——本杰明.富兰克林 (美国开国元勋 物理学家 作家)&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="https://simuty.com/categories/React/"/>
    
    
      <category term="实战" scheme="https://simuty.com/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>React系列-Redux&lt;2&gt;</title>
    <link href="https://simuty.com/2020/04/10React%E7%B3%BB%E5%88%97-Redux/"/>
    <id>https://simuty.com/2020/04/10React系列-Redux/</id>
    <published>2020-04-10T05:43:07.000Z</published>
    <updated>2020-05-15T18:54:01.268Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/04/10React系列-Redux/01.jpg" width="80%"></p><p>预测未来最好的方法就是去创造未来 ——林肯 (美国前总统)</p><a id="more"></a><h1 id="react-通信之-redux">React 通信之 Redux</h1><h3 id="背景">背景</h3><p>React 组件 componentDidMount 的时候初始化 Model，并监听 Model 的 change 事件，当 Model 发生改变时调用 React 组件的 setState 方法重新 render 整个组件，最后在组件 componentWillUnmount 的时候取消监听并销毁 Model。 <img src="/2020/04/10React系列-Redux/03.png" alt="image.png"></p><p>图片来源：<a href="https://www.processon.com/view/5db55958e4b0e433944fdc87" target="_blank" rel="noopener">https://www.processon.com/view/5db55958e4b0e433944fdc87</a></p><h3 id="第一部分-redux的出现">第一部分 Redux的出现</h3><blockquote><p>存在即合理</p></blockquote><p>如<strong>下图左侧</strong>所示，react单向流动的特性，导致在复杂的状态管理面前，会越来越麻烦。Redux的出现就是为了解决state里面的数据问题。 如<strong>下图右侧</strong>所示，redux维护单一状态库。</p><p>Redux三大特性： 1 唯一数据源 2 保持只读状态 3 数据改变只能通过纯函数来执行</p><figure><img src="/2020/04/10React系列-Redux/04.png" alt><figcaption>image.png</figcaption></figure><h3 id="第二部分-redux概念">第二部分 Redux概念</h3><h4 id="一粗略认识">一、粗略认识</h4><p>首先回想下，曾经你去图书馆借书的场景+上图右侧树图。</p><ul><li><strong>你</strong>去图书馆；</li><li><strong>询问</strong>管理员是否有《西部世界iii》这本书；</li><li>管理员<strong>查阅</strong>库存；</li><li>_<strong>反馈</strong>_给你，自己网上找资源去；</li><li>你去网上找资源。</li></ul><p>这个流程其实包含了Redux的整个流程。 <strong>询问 + 查阅</strong>** = **_<strong>反馈。</strong>__<strong>即：action + state = new state</strong>_ &gt; <em><strong>有果必有因</strong></em></p><p><img src="/2020/04/10React系列-Redux/05.png" alt="image.png"> <img src="/2020/04/10React系列-Redux/06.png" alt="image.png"> <img src="/2020/04/10React系列-Redux/07.png" alt="image.png"></p><h4 id="二具体的概念">二、具体的概念</h4><p>React-Redux 将所有组件分成两大类：UI 组件（presentational component）和容器组件（container component）。 &gt; <strong>UI 组件负责 UI 的呈现，容器组件负责管理数据和逻辑</strong></p><p>你可能会问，如果一个组件既有 UI 又有业务逻辑，那怎么办？回答是，将它拆分成下面的结构：外面是一个容器组件，里面包了一个UI 组件。前者负责与外部的通信，将数据传给后者，由后者渲染出视图。 React-Redux 规定，所有的 UI 组件都由用户提供，容器组件则是由 React-Redux 自动生成。也就是说，用户负责视觉层，状态管理则是全部交给它。</p><p>** 以上摘录自---<a href="https://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html" target="_blank" rel="noopener">阮一峰的网络日志</a>，建议初学者多读几遍。</p><ul><li><strong>Action：</strong> 把数据从应用传到 store 的有效载荷；</li><li><strong>Store</strong>: 保存数据的地方；</li><li><strong>Dispatcher</strong>: view发出Action的唯一办法；</li><li><strong>Reducer：</strong> Store收到Action以后，必须给出一个新的state，这样view才会发生变化。<strong>Reducer即根据Action计算state；</strong></li><li><strong>State</strong>: store里面存储的数据。</li></ul><figure><img src="/2020/04/10React系列-Redux/08.gif" alt><figcaption>redux1.gif</figcaption></figure><figure><img src="/2020/04/10React系列-Redux/09.gif" alt><figcaption>redux2.gif</figcaption></figure><h4 id="三示例代码">三、示例代码</h4><p>Redux一个简单的加数操作，涉及完整的流程。 其中涉及</p><ul><li>redux各个概念；</li><li>UI组件 &amp; 容器组件 的相互关系；</li><li>Provider的使用 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider, connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value, onIncreaseClick &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;span&gt;&#123;value&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;onIncreaseClick&#125;&gt;Increase&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Counter.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  value: PropTypes.number.isRequired,</span></span><br><span class="line"><span class="regexp">  onIncreaseClick: PropTypes.func.isRequired</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 定义action</span></span><br><span class="line"><span class="regexp">const increaseAction = &#123; type: "increase" &#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>**</span><br><span class="line"> * Reducer函数</span><br><span class="line"> * @param &#123;*&#125; state 默认值</span><br><span class="line"> * @param &#123;*&#125; action 根据action来计算state.</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">function counter(state = &#123; count: 0 &#125;, action) &#123;</span></span><br><span class="line"><span class="regexp">  const count = state.count;</span></span><br><span class="line"><span class="regexp">  switch (action.type) &#123;</span></span><br><span class="line"><span class="regexp">    case "increase":</span></span><br><span class="line"><span class="regexp">      return &#123; count: count + 1 &#125;;</span></span><br><span class="line"><span class="regexp">    default:</span></span><br><span class="line"><span class="regexp">      return state;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>**</span><br><span class="line"> * 创建store -&gt; 需要reducer -&gt; 默认值+action</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">const store = createStore(counter);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>**</span><br><span class="line"> * 建立一个从（外部的）state对象到（UI 组件的）props对象的映射关系。</span><br><span class="line"> * @param &#123;*&#125; state</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">function mapStateToProps(state) &#123;</span></span><br><span class="line"><span class="regexp">  return &#123;</span></span><br><span class="line"><span class="regexp">    value: state.count</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>**</span><br><span class="line"> * 建立 UI 组件的参数到store.dispatch方法的映射</span><br><span class="line"> * 定义了哪些用户的操作应该当作 Action，传给 Store。</span><br><span class="line"> * 它可以是一个函数，也可以是一个对象。</span><br><span class="line"> *</span><br><span class="line"> * <span class="number">1.</span> 函数：</span><br><span class="line"> *      - 参数：</span><br><span class="line"> *        可以拿到dispatch和ownProps（容器组件的props对象）两个参数；</span><br><span class="line"> *      - 返回值</span><br><span class="line"> *        一个对象，每个键值对都是一个映射，[键名对应函数名]</span><br><span class="line"> *         定义了 UI 组件的参数怎样发出 Action。</span><br><span class="line"> * <span class="number">2.</span> 对象</span><br><span class="line"> *      它的每个键名也是对应 UI 组件的同名参数，键值应该是一个函数，</span><br><span class="line"> *      会被当作 Action creator ，返回的 Action 会由 Redux 自动发出。</span><br><span class="line"> * @param &#123;*&#125; dispatch</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">function mapDispatchToProps(dispatch) &#123;</span></span><br><span class="line"><span class="regexp">  return &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 同名函数 onIncreaseClick， dispatch 一个action</span></span><br><span class="line"><span class="regexp">    onIncreaseClick: () =&gt; dispatch(increaseAction)</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>**</span><br><span class="line"> * connect 自动生成容器组件，将UI组件[Counter]与[容器组件]即关联起来。</span><br><span class="line"> * Counter: UI 组件</span><br><span class="line"> * mapStateToProps： 输入逻辑：外部的数据（即state对象）如何转换为 UI 组件的参数</span><br><span class="line"> * mapDispatchToProps： 用户发出的动作如何变为 Action 对象，从 UI 组件传出去。</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">const App = connect(</span></span><br><span class="line"><span class="regexp">  mapStateToProps,</span></span><br><span class="line"><span class="regexp">  mapDispatchToProps</span></span><br><span class="line"><span class="regexp">)(Counter);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ React-Redux 提供Provider组件，可以让容器组件拿到state。</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Provider在根组件外面包了一层，这样一来，App的所有子组件就默认都可以拿到state了</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 原理： React中的context属性，</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;Provider store=&#123;store&#125;&gt;</span></span><br><span class="line"><span class="regexp">    &lt;App /</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById("root")</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure></li></ul><p>结合下图理解 <img src="/2020/04/10React系列-Redux/10.png" alt="image.png"></p><p>图片来源：<a href="https://juejin.im/post/5acdbe8f51882548fe4a7af1" target="_blank" rel="noopener">https://juejin.im/post/5acdbe8f51882548fe4a7af1</a> #### 总结 这个例子中，最外层的Provider利用react-redux中的provider组件，<em><strong>那么究竟provider组件做了什么？为何provider子组件能够或许context属性？</strong></em> &gt; 上篇文章利用context进行传值，并未过多的解释说明。</p><p>Provider 本身是一个 react 组件，这一点首先要搞清楚。它的实现原理非常简单，利用了 React 的 context 这一特性。文档<a href="https://react.docschina.org/docs/context.html" target="_blank" rel="noopener">Context - React</a>, 只要在最外层的组件实现一个 getChildContext 这个方法，返回一个对象，内部的组件都可以通过 this.context 拿到这个对象。所以一个简单的 Provider 实现是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  getChildContext() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">store</span>: <span class="keyword">this</span>.props.store &#125;    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.children</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line"><span class="keyword">const</span> store = createStore();</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">, document.querySelector('#root'));</span></span><br></pre></td></tr></table></figure><p>那么整个页面的逻辑流程就是：</p><ol type="1"><li>创建Store，createStore(), 接受reducers&amp;默认值；</li><li>createStore 对每一个reducer进行dispatch一个action.type=@<span class="citation" data-cites="redux/INTT类型的action">@redux/INTT类型的action</span>，然后返回state默认值；</li><li>render()进行渲染，每个子组件通过传入的this.context.store.getState()方法获取state对象+ownProps给mapStateToProps方法，构建props，应用到子组件上；</li><li>UI组件触发action, 随即mapDispatchToProps触发相应的action；</li><li>strore接收到action进行reduce，得到新的state，然后再调用所有子组件的mapDispatchToProps生成props.</li><li>最后provider进行重新渲染需要更新的组件。 ### 第三部分 react-redux示例--<a href="https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/todos" target="_blank" rel="noopener">TodoList demo</a> 试着从头到位实现一边，会更加深对本文的理解。鉴于代码太多&amp;上述的理解，应该是没问题的，但不要眼高手低。</li></ol><figure><img src="/2020/04/10React系列-Redux/11.png" alt><figcaption>image.png</figcaption></figure><h4 id="感谢">感谢</h4><p><a href="https://juejin.im/post/5acdbe8f51882548fe4a7af1" target="_blank" rel="noopener">一幅图明白React-Redux的原理</a> <a href="https://www.cnblogs.com/liuheng/p/11796819.html" target="_blank" rel="noopener">解析：让你弄懂redux原理</a> <a href="https://www.cnblogs.com/nayek/p/12369418.html" target="_blank" rel="noopener">https://www.cnblogs.com/nayek/p/12369418.html</a> <a href="https://www.processon.com/view/5db55958e4b0e433944fdc87" target="_blank" rel="noopener">https://www.processon.com/view/5db55958e4b0e433944fdc87</a> <a href="https://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/04/10React系列-Redux/01.jpg&quot; width=&quot;80%&quot;&gt;&lt;/p&gt;
&lt;p&gt;预测未来最好的方法就是去创造未来 ——林肯 (美国前总统)&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="https://simuty.com/categories/React/"/>
    
    
  </entry>
  
</feed>
